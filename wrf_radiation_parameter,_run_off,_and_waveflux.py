# -*- coding: utf-8 -*-
"""WRF Radiation Parameter, Run Off, and WaveFlux.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YyL-C7hrqsSgncX6MasfcktzJaslUlyS

# Radiation Parameter
# LW=RRTM SW=DUDHIA

## Packages
"""

from google.colab import drive
drive.mount('/content/drive/')

!pip install wrf-python==1.3.1

!pip install metpy

!pip install cartopy
!pip uninstall shapely
!pip install shapely --no-binary shapely

!apt-get install libgeos-3.6.2
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip

!pip install satpy pyyaml==5.4.1 cartopy rasterio pycoast

!pip install pyproj==1.9.6

!pip install basemap

import sys
sys.path.insert(0,'/content/drive/MyDrive/metsat_libs/')

import cartopy
cartopy.config['data_dir']='/content/drive/MyDrive/cartopy/'
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
import cartopy.crs as crs
import cartopy.feature as cfe
from cartopy.feature import NaturalEarthFeature

import numpy as np
from netCDF4 import Dataset
import xarray as xr

import matplotlib
from matplotlib.cm import get_cmap
import matplotlib.pyplot as plt

from pylab import *

import wrf
from wrf import to_np, getvar, smooth2d, get_basemap, latlon_coords, interplevel
from wrf import *

# Commented out IPython magic to ensure Python compatibility.
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
# %matplotlib inline

# Open the NetCDF file
ncfile = Dataset('/content/drive/MyDrive/grup2mpcn/wrfout_d02_2019-02-23_00_00_00_RTTM_Dudhia')

ncfile.variables

time = wrf.getvar(ncfile,'Times',timeidx=wrf.ALL_TIMES)
time

!python -m pip uninstall matplotlib
!pip install matplotlib==3.1.3

"""## Curah Hujan

### Visualisasi
"""

for idx,val in enumerate(time.values):
    prec_slice = prec.isel(Time=idx)
    #Create a figure
    fig = plt.figure(figsize=(12,6))
    # Set the GeoAxes to the projection used by WRF
    ax = plt.axes(projection=crs.Mercator())
    # Add coastlines
    ax.coastlines('10m', linewidth=2)

    #Deklarasi variabel plot
    x = wrf.to_np(prec_slice['XLONG'])
    y = wrf.to_np(prec_slice['XLAT'])
    variable = wrf.to_np(prec_slice) #dimensi harus jadi 2d (x,y) tidak ada z atau time
    waktu = pd.to_datetime(prec_slice['Time'].values).strftime('%d %B %Y %H:%M:%S')
    #Mau mengubah format penulisan waktu?? -> https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior

# Plot contours
#     lev = np.arange(0,35,5)
    lev = [0,1,5,10,20]
    map = plt.contourf(x,                    #x coordinate
                 y,                    #y coordinate
                 variable,                  #variable to plot
                 transform=crs.PlateCarree(),
                 cmap=get_cmap("Blues"),  #set cmap, reversed() to reversed color order
                 levels=lev,                         #set level
                 extend='max')                      #extend color bar

    # Add a color bar
    cbar = plt.colorbar(ax=ax, shrink=.8)
    cbar.set_label(prec_slice.units)

    # Add the gridlines
    gl=ax.gridlines(color='black')
    gl.bottom_labels, gl.left_labels = True, True
    gl.xformatter = LONGITUDE_FORMATTER
    gl.yformatter = LATITUDE_FORMATTER
    gl.xlabel_style = {'size': 10}
    gl.ylabel_style = {'size': 10}

    #add title
    plt.title('Curah Hujan ('+prec_slice.units+')'+'\n'+str(waktu) + ' WIB', fontsize=15)

"""### Mengambil data di 1 Titik"""

"""https://wrf-python.readthedocs.io/en/latest/user_api/generated/wrf.ll_to_xy.html#wrf.ll_to_xy"""
x_y = wrf.ll_to_xy(ncfile, -8.638, 106.1) #(Melihat index latlon dari nc)
x_y

prec_titik = prec[:,x_y[1].values,x_y[0].values]
prec_titik

tabel = pd.DataFrame({
    'Waktu (WIB)': prec_titik['Time'].values,
    'Curah Hujan':prec_titik.values
})
tabel

ket_hujan = []
for i in tabel['Curah Hujan']:
    if i == 0:
        i = 'Tidak Hujan'
    elif i < 5:
        i = 'Ringan'
    elif 5 <= i < 10:
        i = 'Sedang'
    else:
        i = 'Lebat'
    ket_hujan.append(i)
tabel["Keterangan Hujan Eta-KF"] = ket_hujan
tabel

#Export to excel
tabel.to_excel('Curah Hujan.xlsx',sheet_name='Curah Hujan Hasil WRF')

"""### Verifikasi Data Kategorikal -> Tabel Kontingensi"""

#Membaca Observasi
observasi = pd.read_excel('/content/drive/My Drive/grup2mpcn/Ogimet.xlsx', sheet_name = 'Data Ogimet', usecols=['Waktu', 'Prec'])
observasi

#Jika waktu observasi masih dalam utc, ubah ke dalam bentuk WIB dengan cara yang sama seperti sebelumnya
# observasi['Waktu'] += np.timedelta64(7, 'h')
# observasi

ket_hujan = []
for i in observasi['Prec']:
    if i == 0:
        i = 'Tidak Hujan'
    elif i < 5:
        i = 'Ringan'
    elif 5 <= i < 10:
        i = 'Sedang'
    else:
        i = 'Lebat'
    ket_hujan.append(i)
observasi["Keterangan Hujan Observasi"] = ket_hujan
observasi

"""Terdapat perbedaan jumlah data antara observasi dan data model, dapat kita filter waktu yang beririsannya -> Inner Join
![image.png](attachment:image.png)
"""

#Ubah salah satu nama kolom waktu antara keluaran model dan observasi menjadi sama  -> fungsi merge dapat dijalankan
"""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html"""
observasi_fix = observasi.rename(columns={"Waktu": "Waktu (WIB)"})
observasi_fix

#Ambil keternagan hujannya saja dan waktu, nilai curah hujan diabaikan
CH = tabel[['Waktu (WIB)','Keterangan Hujan Eta-KF']].merge(observasi_fix[['Waktu (WIB)','Keterangan Hujan Observasi']],
                                                            how='inner', on='Waktu (WIB)')
CH

#Melihat ada jenis apa keterangannya
CH['Keterangan Hujan Eta-KF'].unique()

"""https://scikit-learn.org/stable/modules/generated/sklearn.metrics.multilabel_confusion_matrix.html"""
from sklearn.metrics import multilabel_confusion_matrix
target_names = ["Tidak Hujan",'Ringan','Sedang','Lebat']
mcm = multilabel_confusion_matrix(CH['Keterangan Hujan Observasi'],CH['Keterangan Hujan Eta-KF'], labels=target_names)

tn = mcm[:, 0, 0]
tp = mcm[:, 1, 1]
fn = mcm[:, 1, 0]
fp = mcm[:, 0, 1]
Kinerja = pd.DataFrame({"True-Positif":tp,"True-Negatif":tn,"False-Positif":fp,"False-Negatif":fn}, index=target_names).T
Kinerja['Total']=[tp.sum(),tn.sum(),fp.sum(),fn.sum()]
Kinerja.index.name = 'Kinerja Anemos'
Kinerja

POD = []
FAR= []
B = []
TS = []
colnames=[]
for i,col in enumerate(Kinerja.columns[:-1]):
  #POD
  POD.append(round(tp[i]/(tp[i] + fp[i]),2))
  #FAR
  FAR.append(round(tn[i]/(tp[i] + tn[i]),2))
  #Bias
  B.append(round((tp[i] + tn[i])/(tp[i] + fp[i]),2))
  #TS
  TS.append(round(tp[i] / (tp[i]+tn[i]+fp[i]),2))
  colnames.append(col)

Individual_Score = pd.DataFrame({"POD":POD,"FAR":FAR,"Bias":B,"TS":TS}, index=colnames).T
Individual_Score.index.name = 'Kinerja Skema Eta-KF'
Individual_Score

a = Kinerja['Total']['True-Positif']
d = Kinerja['Total']['True-Negatif']
b = Kinerja['Total']['False-Positif']
c = Kinerja['Total']['False-Negatif']

#Overall PC
PC = round((a+d)/(a+b+c+d),2)
#Overall POD/H
H = round(a/(a+c) ,2)
#Overall POFD/F
F = round((b)/(b+d),2)
#Overall KSS/TSS
KSS =round(H - F,2)
#Overall HSS
ref = ((a+b)*(a+c)+(b+d)*(c+d))/(a+b+c+d)**2
HSS = round((PC - ref)/(1 - ref),2)

colnames= ['Overall Score']
Overall_Score = pd.DataFrame({"PC":PC,"KSS":KSS,"HSS":HSS}, index=colnames).T
Overall_Score.index.name = 'Kinerja Skema Eta-KF'
Overall_Score

"""## Run Off"""

run_off=wrf.getvar(ncfile, "SFROFF",timeidx=wrf.ALL_TIMES )

run_off

levels = np.array([0,5,10,15,20,25,30,35,40,45])

for time in range (0,8):
    run_off=wrf.getvar(ncfile, "SFROFF",time)
    lats, lons = latlon_coords(run_off)
    fig = plt.figure(figsize=(12,15))

    bm = get_basemap(run_off)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(run_off[:,:]),20, levels = levels, cmap=get_cmap("Blues"))


    cb = plt.colorbar(orientation="vertical",shrink=.62)
    cb.set_ticks([0,45])
    cb.set_ticklabels([0,45])
    cb.set_label('Runoff, fontsize=9')


    plt.title('Runoff'+'\n'+'CAM+Dudhia'+'\n'+ str(run_off.Time.values) + 'UTC', fontsize=10)
    plt.show()

"""### CLOUD FRACTION"""

cld = getvar(ncfile, "CLDFRA")
cld.shape

cld

frac = getvar(ncfile,'cloudfrac',vert_type='pressure',mid_thresh=350,high_thresh=400)

frac.shape

levels = np.array([0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0])

for time in range (0,8):
    run_off = getvar(ncfile, "SFROFF",time)
    lats, lons = latlon_coords(cld)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(cld)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(cld[6,:,:]), 20, levels = levels, cmap=get_cmap("Blues"))


    cb = plt.colorbar(orientation="horizontal",shrink=.62)
    cb.set_ticks([0,1])
    cb.set_ticklabels([0,1])
    cb.set_label('Tutupan Awan 0/8                                                                                           Tutupan Awan 8/8', fontsize=9)


    plt.title('Cloud Fraction'+'\n'+'CAM'+'\n'+ str(cld.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('CR-(RRTM-DUDHIA)'+str(xx) +'.png')

cld = wrf.getvar(ncfile, "CLDFRA",timeidx=wrf.ALL_TIMES)
# cld[15][6][15]

cld

for time in range (0,8):
    # xx = int(time)
    cld = getvar(ncfile, "CLDFRA",time)
    print(cld)

for time in range (0,2):
    # xx = int(time)
    cld = getvar(ncfile, "CLDFRA",time)
    lats, lons = latlon_coords(cld)

!apt-get install libgeos-3.5.0
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip

!pip install pyproj==1.9.6

!pip install basemap

# Commented out IPython magic to ensure Python compatibility.
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
# %matplotlib inline

levels = np.array([0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0])

for time in range (0,8):
    cld = getvar(ncfile, "CLDFRA",time)
    lats, lons = latlon_coords(cld)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(cld)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(cld[6,:,:]), 20, levels = levels, cmap=get_cmap("Blues"))


    cb = plt.colorbar(orientation="horizontal",shrink=.62)
    cb.set_ticks([0,1])
    cb.set_ticklabels([0,1])
    cb.set_label('Tutupan Awan 0/8                                                                                           Tutupan Awan 8/8', fontsize=9)


    plt.title('Cloud Fraction'+'\n'+'CAM'+'\n'+ str(cld.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('CR-(RRTM-DUDHIA)'+str(xx) +'.png')

"""### KETINGGIAN PBL"""

pblh = getvar(ncfile, "PBLH")

levels = np.arange(0,1300,80)
for time in range (0,8):
    pblh = getvar(ncfile, "PBLH",time)
    lats, lons = latlon_coords(pblh)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(pblh)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(pblh), 20, levels=levels, cmap=get_cmap("jet"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('m',fontsize=12)
    plt.title('PBL HEIGHT'+'\n'+'CAM'+'\n'+ str(pblh.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('PBLH-(RRTM_DUDHIA)'+str(xx) +'.png')

"""### DOWNWARD LONG WAVE FLUX AT GROUND SURFACE"""

glw = getvar(ncfile, "GLW")

levels = np.arange(300,465,5)
for time in range (0,8):
    glw = getvar(ncfile, "GLW", time)
    lats, lons = latlon_coords(glw)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(glw)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(glw), 20, levels = levels,
                cmap=get_cmap("RdYlBu"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('W m-2',fontsize=12)
    plt.title('DOWNWARD LONGWAVE FLUX AT GROUND SURFACE'+'\n'+'CAM'+'\n'+ str(glw.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('GLW-(RRTM-DUDHIA)'+str(xx) +'.png')

"""### HEAT FLUX"""

hfx = getvar(ncfile, "HFX")

levels = np.arange(-40,420,20)
for time in range (0,8):
    hfx = getvar(ncfile, "HFX",time)
    lats, lons = latlon_coords(hfx)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(glw)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(hfx), 20, levels = levels,
                cmap=get_cmap("RdYlBu"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('W m-2',fontsize=12)
    plt.title('UPWARD HEAT FLUX AT SURFACE'+'\n'+'CAM'+'\n'+ str(hfx.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('UHF-(RRTM-DUDHIA)'+str(xx) +'.png')

"""### LATENT HEAT"""

LH = getvar(ncfile, "LH")

levels = np.arange(-40,340,20)

for time in range (0,8):
    LH = getvar(ncfile, "LH",time)
    lats, lons = latlon_coords(LH)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(LH)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(LH), 20, levels=levels,
                cmap=get_cmap("coolwarm"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('W m-2',fontsize=12)
    plt.title('LATENT HEAT FLUX AT SURFACE'+'\n'+'CAM'+'\n'+ str(LH.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('LH-(RRTM-DUDHIA)'+str(xx) +'.png')

"""## Outgoing Longwave"""

OLR = getvar(ncfile, "OLR")

levels = np.arange(70,300,10)

for time in range (0,8):
    OLR = getvar(ncfile, "OLR",time)
    lats, lons = latlon_coords(OLR)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(OLR)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(OLR),20,levels=levels,
                cmap=get_cmap("RdYlBu"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('W m-2',fontsize=12)
    plt.title('TOA OUTGOING LONG WAVE'+'\n'+'CAM'+'\n'+ str(OLR.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('OLR-(RRTM-DUDHIA)'+str(xx) +'.png')

"""## Downward Short WaveFLux"""

swd = getvar(ncfile, "SWDOWN",timeidx=wrf.ALL_TIMES)
swd

for time in range (0,8):
    swd = getvar(ncfile, "SWDOWN",time)
    print(swd)

levels = np.arange(0,600,50)

for time in range (0,8):
    swd = getvar(ncfile, "SWDOWN",time)
    lats, lons = latlon_coords(swd)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(swd)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(swd),20,levels=levels,
                cmap=get_cmap("RdYlBu"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('W m-2',fontsize=12)
    plt.title('DOWNWARD SHORT WAVE FLUX AT GROUND SURFACE'+'\n'+'CAM'+'\n'+ str(swd.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('SWD-(RRTM-DUDHIA)'+str(xx) +'.png')

temp = getvar(ncfile, "T2")

temp={}
tempc={}
for time in range (0,8):
    temp["temp{0}".format(time)]=getvar(ncfile, "T2", int(time))
    tempc["tempc{0}".format(time)]=temp["temp{0}".format(time)]-273.15

temp.shape

"""================================================================================"""

"""https://wrf-python.readthedocs.io/en/latest/user_api/generated/wrf.ll_to_xy.html#wrf.ll_to_xy"""
x_y = wrf.ll_to_xy(ncfile, -7, 110) #(Melihat index latlon dari nc)
x_y

temp

temp_titik = temp[95,87]
temp_titik

for time in range (0,8):
    temp = getvar(ncfile, "T2",time)
    print(temp[95,87])

temp[95,87].values

"""============================================================================================="""

levels = np.arange(12,32,1)

for time in range (0,8):
    temp = getvar(ncfile, "T2",time)
    lats, lons = latlon_coords(temp)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(temp)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(tempc["tempc{0}".format(time)]),20,levels=levels,cmap=get_cmap("coolwarm"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('Celcius',fontsize=12)
    plt.title('TEMPERATUR at 2M'+'\n'+'CAM'+'\n'+ str(temp.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('T-(RRTM-DUDHIA)'+str(xx) +'.png')



rainc = wrf.getvar(ncfile,'RAINNC',timeidx=wrf.ALL_TIMES)
rainc

"""==============================================================================================================="""

prec = rainc.copy()

d={}
e={}
for time in range (0,8):
    d["rainc{0}".format(time)] = getvar(ncfile, "RAINC", int(time))

e["cumrain0"] = d["rainc0"]

for time in range(1,8):
     e["cumrain{0}".format(time)] = d["rainc{0}".format(time)] - d["rainc{0}".format(time-1)]

del d

e

rain = getvar(ncfile, "RAINC")

for time in range (0,8):
    # xx = int(time)
    rain = getvar(ncfile, "RAINC",time)
    print(rain)

levels = np.arange(0,20,1)

for time in range (0,8):
    rain = getvar(ncfile, "RAINC",time)
    lats, lons = latlon_coords(rain)
    fig = plt.figure(figsize=(12,9))

    bm = get_basemap(temp)
    bm.drawcoastlines(linewidth=2)
    bm.drawstates(linewidth=2)
    bm.drawcountries(linewidth=2)
    parallels = np.arange(-9.5,-5.5,0.5)
    bm.drawparallels(parallels, labels=[1,0,0,0],fontsize=9)
    meridians = np.arange(110.5,115,0.5)
    bm.drawmeridians(meridians, labels=[0,0,0,1],fontsize=9)
    x,y = bm(to_np(lons), to_np(lats))
    bm.contourf(x, y, to_np(e["cumrain{0}".format(time)]), 20,levels=levels,
                cmap=get_cmap("nipy_spectral"))

    cb = plt.colorbar(shrink=.62)
    cb.set_label('mm',fontsize=12)
    plt.title('PRECIPITATION'+'\n'+'RRTM - DUDHIA'+'\n'+ str(rain.Time.values) + 'UTC', fontsize=10)
    plt.show()

    #fig.savefig('Rain-(RRTM-DUDHIA)'+str(xx) +'.png')

