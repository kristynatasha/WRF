{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vIhIa7NOiTiY"
      },
      "source": [
        "# Packages yang digunakan\n",
        "### Instalasi\n",
        "WRF:\n",
        "https://wrf-python.readthedocs.io/en/latest/installation.html\n",
        "\n",
        "Metpy:\n",
        "https://unidata.github.io/MetPy/latest/userguide/installguide.html\n",
        "\n",
        "Cartopy:\n",
        "https://scitools.org.uk/cartopy/docs/latest/installing.html\n",
        "\n",
        "Basemap (Optional):\n",
        "https://anaconda.org/anaconda/basemap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QwyVtbBgjs-E",
        "outputId": "56d606d1-2d8a-40b1-8813-bb1ee6264ed1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nhkKH5bYkdPf",
        "outputId": "e1c82d98-efd6-491f-cd44-bdcb4d4d865c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting wrf-python==1.3.1\n",
            "  Downloading wrf-python-1.3.1.tar.gz (1.1 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.1 MB 5.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from wrf-python==1.3.1) (1.21.5)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.7/dist-packages (from wrf-python==1.3.1) (1.14.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from wrf-python==1.3.1) (57.4.0)\n",
            "Building wheels for collected packages: wrf-python\n",
            "  Building wheel for wrf-python (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wrf-python: filename=wrf_python-1.3.1-cp37-cp37m-linux_x86_64.whl size=594493 sha256=1c0ab3c331486f977356b36344e9b2eeceb826c54c678ce10ce18eef3095dcc6\n",
            "  Stored in directory: /root/.cache/pip/wheels/3c/48/02/2482e25eeae0516f5c2acf97fb74b9241dfab0ed61f7dd0708\n",
            "Successfully built wrf-python\n",
            "Installing collected packages: wrf-python\n",
            "Successfully installed wrf-python-1.3.1\n"
          ]
        }
      ],
      "source": [
        "!pip install wrf-python==1.3.1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 981
        },
        "id": "bKQeEhOjkhOA",
        "outputId": "d6365480-357e-4833-ea3f-e75cd4be99c4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting metpy\n",
            "  Downloading MetPy-1.2.0-py3-none-any.whl (367 kB)\n",
            "\u001b[?25l\r\u001b[K     |█                               | 10 kB 16.4 MB/s eta 0:00:01\r\u001b[K     |█▉                              | 20 kB 9.1 MB/s eta 0:00:01\r\u001b[K     |██▊                             | 30 kB 7.8 MB/s eta 0:00:01\r\u001b[K     |███▋                            | 40 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████▌                           | 51 kB 4.6 MB/s eta 0:00:01\r\u001b[K     |█████▍                          | 61 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 71 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 81 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████                        | 92 kB 5.8 MB/s eta 0:00:01\r\u001b[K     |█████████                       | 102 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 112 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████▊                     | 122 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 133 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████▌                   | 143 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 153 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 163 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 174 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 184 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 194 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 204 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▊             | 215 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 225 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 235 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 245 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 256 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 266 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 276 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 286 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 296 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 307 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 317 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 327 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 337 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 348 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 358 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 367 kB 5.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pooch>=0.1 in /usr/local/lib/python3.7/dist-packages (from metpy) (1.6.0)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (1.3.5)\n",
            "Requirement already satisfied: scipy>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (1.4.1)\n",
            "Requirement already satisfied: importlib-resources>=1.3.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (5.4.0)\n",
            "Requirement already satisfied: xarray>=0.14.1 in /usr/local/lib/python3.7/dist-packages (from metpy) (0.18.2)\n",
            "Requirement already satisfied: traitlets>=4.3.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (5.1.1)\n",
            "Collecting matplotlib>=3.3.0\n",
            "  Downloading matplotlib-3.5.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (11.2 MB)\n",
            "\u001b[K     |████████████████████████████████| 11.2 MB 39.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (1.21.5)\n",
            "Collecting pyproj>=2.5.0\n",
            "  Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 6.3 MB 33.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: importlib-metadata>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from metpy) (4.11.3)\n",
            "Collecting pint>=0.10.1\n",
            "  Downloading Pint-0.18-py2.py3-none-any.whl (209 kB)\n",
            "\u001b[K     |████████████████████████████████| 209 kB 43.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=1.0.0->metpy) (3.10.0.2)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=1.0.0->metpy) (3.7.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (21.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (2.8.2)\n",
            "Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (3.0.7)\n",
            "Collecting fonttools>=4.22.0\n",
            "  Downloading fonttools-4.31.2-py3-none-any.whl (899 kB)\n",
            "\u001b[K     |████████████████████████████████| 899 kB 41.9 MB/s \n",
            "\u001b[?25hRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (0.11.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (1.4.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.3.0->metpy) (7.1.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->metpy) (2018.9)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from pooch>=0.1->metpy) (2.23.0)\n",
            "Requirement already satisfied: appdirs>=1.3.0 in /usr/local/lib/python3.7/dist-packages (from pooch>=0.1->metpy) (1.4.4)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from pyproj>=2.5.0->metpy) (2021.10.8)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3.0->metpy) (1.15.0)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch>=0.1->metpy) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch>=0.1->metpy) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch>=0.1->metpy) (1.24.3)\n",
            "Requirement already satisfied: setuptools>=40.4 in /usr/local/lib/python3.7/dist-packages (from xarray>=0.14.1->metpy) (57.4.0)\n",
            "Installing collected packages: fonttools, pyproj, pint, matplotlib, metpy\n",
            "  Attempting uninstall: matplotlib\n",
            "    Found existing installation: matplotlib 3.2.2\n",
            "    Uninstalling matplotlib-3.2.2:\n",
            "      Successfully uninstalled matplotlib-3.2.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Successfully installed fonttools-4.31.2 matplotlib-3.5.1 metpy-1.2.0 pint-0.18 pyproj-3.2.1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "matplotlib",
                  "mpl_toolkits"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!pip install metpy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hcjkdNcik-uO",
        "outputId": "52cc85ce-ed2f-4b7e-a0d5-351177bb287c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting cartopy\n",
            "  Downloading Cartopy-0.20.2.tar.gz (10.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 10.8 MB 4.8 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[33mWARNING: Discarding https://files.pythonhosted.org/packages/f6/55/1e1c737dc9436b320deead73d1c455ddbb74b8b6992081863492f6f6378a/Cartopy-0.20.2.tar.gz#sha256=4d08c198ecaa50a6a6b109d0f14c070e813defc046a83ac5d7ab494f85599e35 (from https://pypi.org/simple/cartopy/) (requires-python:>=3.7). Command errored out with exit status 1: /usr/bin/python3 /usr/local/lib/python3.7/dist-packages/pip/_vendor/pep517/in_process/_in_process.py get_requires_for_build_wheel /tmp/tmpsfeyfayd Check the logs for full command output.\u001b[0m\n",
            "  Downloading Cartopy-0.20.1.tar.gz (10.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 10.8 MB 19.4 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[33mWARNING: Discarding https://files.pythonhosted.org/packages/fc/59/aa52698e3838f4cd0e7eaa75bd86837e9e0b05041dbdaee3cda2fffced06/Cartopy-0.20.1.tar.gz#sha256=91f87b130e2574547a20cd634498df97d797abd12dcfd0235bc0cdbcec8b05e3 (from https://pypi.org/simple/cartopy/) (requires-python:>=3.7). Command errored out with exit status 1: /usr/bin/python3 /usr/local/lib/python3.7/dist-packages/pip/_vendor/pep517/in_process/_in_process.py get_requires_for_build_wheel /tmp/tmptccefa_y Check the logs for full command output.\u001b[0m\n",
            "  Downloading Cartopy-0.20.0.tar.gz (10.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 10.8 MB 30.5 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[33mWARNING: Discarding https://files.pythonhosted.org/packages/0f/c0/58453b036e79046d211f083880d58dcce787e7e07647ac25dc46c6555099/Cartopy-0.20.0.tar.gz#sha256=eae58aff26806e63cf115b2bce9477cedc4aa9f578c5e477b2c25cfa404f2b7a (from https://pypi.org/simple/cartopy/) (requires-python:>=3.7). Command errored out with exit status 1: /usr/bin/python3 /usr/local/lib/python3.7/dist-packages/pip/_vendor/pep517/in_process/_in_process.py get_requires_for_build_wheel /tmp/tmptwegqidv Check the logs for full command output.\u001b[0m\n",
            "  Downloading Cartopy-0.19.0.post1.tar.gz (12.1 MB)\n",
            "\u001b[K     |████████████████████████████████| 12.1 MB 26.3 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: shapely>=1.5.6 in /usr/local/lib/python3.7/dist-packages (from cartopy) (1.8.1.post1)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from cartopy) (1.21.5)\n",
            "Collecting pyshp>=2\n",
            "  Downloading pyshp-2.2.0-py3-none-any.whl (44 kB)\n",
            "\u001b[K     |████████████████████████████████| 44 kB 2.5 MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: cartopy\n",
            "  Building wheel for cartopy (PEP 517) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for cartopy: filename=Cartopy-0.19.0.post1-cp37-cp37m-linux_x86_64.whl size=12516276 sha256=cf2e8067ee7f39ac567bf78431130ce2e2bb66ccddf5dd48c2628097d1d947e9\n",
            "  Stored in directory: /root/.cache/pip/wheels/98/01/f7/bd10aeb96fe4b518cde5f7c4f5e12c7202f85b7353a5017847\n",
            "Successfully built cartopy\n",
            "Installing collected packages: pyshp, cartopy\n",
            "Successfully installed cartopy-0.19.0.post1 pyshp-2.2.0\n",
            "Found existing installation: Shapely 1.8.1.post1\n",
            "Uninstalling Shapely-1.8.1.post1:\n",
            "  Would remove:\n",
            "    /usr/local/lib/python3.7/dist-packages/Shapely-1.8.1.post1.dist-info/*\n",
            "    /usr/local/lib/python3.7/dist-packages/Shapely.libs/libgeos-5781ad74.so.3.10.2\n",
            "    /usr/local/lib/python3.7/dist-packages/Shapely.libs/libgeos_c-fdac42b1.so.1.16.0\n",
            "    /usr/local/lib/python3.7/dist-packages/shapely/*\n",
            "Proceed (y/n)? y\n",
            "  Successfully uninstalled Shapely-1.8.1.post1\n",
            "Collecting shapely\n",
            "  Downloading Shapely-1.8.1.post1.tar.gz (198 kB)\n",
            "\u001b[K     |████████████████████████████████| 198 kB 5.3 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: shapely\n",
            "  Building wheel for shapely (PEP 517) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for shapely: filename=Shapely-1.8.1.post1-cp37-cp37m-linux_x86_64.whl size=665636 sha256=6f33a4225e528fe968d194496f21d33fff81a100a00ba6c0c3bd1d5343a1e6e1\n",
            "  Stored in directory: /root/.cache/pip/wheels/ea/8d/2f/ab748b8a432b3c6cd72e751b3bca17c5a9ed4538b1e78467e6\n",
            "Successfully built shapely\n",
            "Installing collected packages: shapely\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Successfully installed shapely-1.8.1.post1\n"
          ]
        }
      ],
      "source": [
        "!pip install cartopy\n",
        "!pip uninstall shapely\n",
        "!pip install shapely --no-binary shapely"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EuELvCDdlQxa",
        "outputId": "30e34098-2035-4981-a101-03f5f6e69e2f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "libgeos-3.6.2 is already the newest version (3.6.2-1build2).\n",
            "libgeos-3.6.2 set to manually installed.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.\n",
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "libgeos-dev is already the newest version (3.6.2-1build2).\n",
            "libgeos-dev set to manually installed.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.\n",
            "Collecting https://github.com/matplotlib/basemap/archive/master.zip\n",
            "  Downloading https://github.com/matplotlib/basemap/archive/master.zip\n",
            "\u001b[K     - 129.7 MB 89 kB/s\n",
            "\u001b[31mERROR: File \"setup.py\" not found for legacy project https://github.com/matplotlib/basemap/archive/master.zip.\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!apt-get install libgeos-3.6.2\n",
        "!apt-get install libgeos-dev\n",
        "!pip install https://github.com/matplotlib/basemap/archive/master.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bmidMc57iTic"
      },
      "outputs": [],
      "source": [
        "from netCDF4 import Dataset\n",
        "#import os\n",
        "#os.environ[\"PROJ_LIB\"] = \"C:\\\\Utilities\\\\Python\\\\Anaconda\\\\Library\\\\share\"; #fixr\n",
        "import wrf\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import metpy\n",
        "from metpy.units import units\n",
        "import metpy.calc\n",
        "\n",
        "#Menggambar peta\n",
        "import matplotlib\n",
        "from matplotlib.cm import get_cmap\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#cartopy\n",
        "#from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
        "#import cartopy.crs as crs\n",
        "#import cartopy.feature as cfe\n",
        "#from cartopy.feature import NaturalEarthFeature\n",
        "\n",
        "#basemap\n",
        "#from mpl_toolkits.basemap import Basemap\n",
        "#from mpl_toolkits.basemap import cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kVHICkpq3b28"
      },
      "outputs": [],
      "source": [
        "import sys\n",
        "sys.path.insert(0,'/content/drive/MyDrive/metsat_libs/')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Zc4oCcof3lJO",
        "outputId": "731d4ea0-a843-4442-a552-31b79193c521"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting satpy\n",
            "  Downloading satpy-0.35.0.tar.gz (1.1 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.1 MB 6.1 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting pyyaml==5.4.1\n",
            "  Downloading PyYAML-5.4.1-cp37-cp37m-manylinux1_x86_64.whl (636 kB)\n",
            "\u001b[K     |████████████████████████████████| 636 kB 36.8 MB/s \n",
            "\u001b[?25hRequirement already satisfied: cartopy in /usr/local/lib/python3.7/dist-packages (0.19.0.post1)\n",
            "Collecting rasterio\n",
            "  Downloading rasterio-1.2.10-cp37-cp37m-manylinux1_x86_64.whl (19.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 19.3 MB 402 kB/s \n",
            "\u001b[?25hCollecting pycoast\n",
            "  Downloading pycoast-1.5.0.tar.gz (7.5 MB)\n",
            "\u001b[K     |████████████████████████████████| 7.5 MB 36.8 MB/s \n",
            "\u001b[?25hCollecting trollsift\n",
            "  Downloading trollsift-0.4.0.tar.gz (44 kB)\n",
            "\u001b[K     |████████████████████████████████| 44 kB 2.6 MB/s \n",
            "\u001b[?25hCollecting pyresample>=1.11.0\n",
            "  Downloading pyresample-1.23.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (3.4 MB)\n",
            "\u001b[K     |████████████████████████████████| 3.4 MB 34.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from satpy) (7.1.2)\n",
            "Requirement already satisfied: pyproj>=2.2 in /usr/local/lib/python3.7/dist-packages (from satpy) (3.2.1)\n",
            "Collecting donfig\n",
            "  Downloading donfig-0.7.0.tar.gz (32 kB)\n",
            "Collecting zarr\n",
            "  Downloading zarr-2.11.1-py3-none-any.whl (153 kB)\n",
            "\u001b[K     |████████████████████████████████| 153 kB 44.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: appdirs in /usr/local/lib/python3.7/dist-packages (from satpy) (1.4.4)\n",
            "Requirement already satisfied: pooch in /usr/local/lib/python3.7/dist-packages (from satpy) (1.6.0)\n",
            "Collecting pykdtree\n",
            "  Downloading pykdtree-1.3.4-cp37-cp37m-manylinux1_x86_64.whl (212 kB)\n",
            "\u001b[K     |████████████████████████████████| 212 kB 51.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: xarray!=0.13.0,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from satpy) (0.18.2)\n",
            "Requirement already satisfied: numpy>=1.13 in /usr/local/lib/python3.7/dist-packages (from satpy) (1.21.5)\n",
            "Collecting trollimage>1.10.1\n",
            "  Downloading trollimage-1.18.3.tar.gz (69 kB)\n",
            "\u001b[K     |████████████████████████████████| 69 kB 8.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: dask[array]>=0.17.1 in /usr/local/lib/python3.7/dist-packages (from satpy) (2.12.0)\n",
            "Requirement already satisfied: toolz>=0.7.3 in /usr/local/lib/python3.7/dist-packages (from dask[array]>=0.17.1->satpy) (0.11.2)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from pyproj>=2.2->satpy) (2021.10.8)\n",
            "Collecting configobj\n",
            "  Downloading configobj-5.0.6.tar.gz (33 kB)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from pyresample>=1.11.0->satpy) (4.11.3)\n",
            "Requirement already satisfied: setuptools>=3.2 in /usr/local/lib/python3.7/dist-packages (from pyresample>=1.11.0->satpy) (57.4.0)\n",
            "Requirement already satisfied: pandas>=1.0 in /usr/local/lib/python3.7/dist-packages (from xarray!=0.13.0,>=0.10.1->satpy) (1.3.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0->xarray!=0.13.0,>=0.10.1->satpy) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0->xarray!=0.13.0,>=0.10.1->satpy) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=1.0->xarray!=0.13.0,>=0.10.1->satpy) (1.15.0)\n",
            "Requirement already satisfied: pyshp>=2 in /usr/local/lib/python3.7/dist-packages (from cartopy) (2.2.0)\n",
            "Requirement already satisfied: shapely>=1.5.6 in /usr/local/lib/python3.7/dist-packages (from cartopy) (1.8.1.post1)\n",
            "Collecting affine\n",
            "  Downloading affine-2.3.1-py2.py3-none-any.whl (16 kB)\n",
            "Collecting click-plugins\n",
            "  Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB)\n",
            "Requirement already satisfied: click>=4.0 in /usr/local/lib/python3.7/dist-packages (from rasterio) (7.1.2)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.7/dist-packages (from rasterio) (21.4.0)\n",
            "Collecting cligj>=0.5\n",
            "  Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB)\n",
            "Collecting snuggs>=1.4.1\n",
            "  Downloading snuggs-1.4.7-py3-none-any.whl (5.4 kB)\n",
            "Requirement already satisfied: pyparsing>=2.1.6 in /usr/local/lib/python3.7/dist-packages (from snuggs>=1.4.1->rasterio) (3.0.7)\n",
            "Collecting aggdraw\n",
            "  Downloading aggdraw-1.3.14-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (992 kB)\n",
            "\u001b[K     |████████████████████████████████| 992 kB 41.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->pyresample>=1.11.0->satpy) (3.10.0.2)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->pyresample>=1.11.0->satpy) (3.7.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from pooch->satpy) (21.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from pooch->satpy) (2.23.0)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch->satpy) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch->satpy) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->pooch->satpy) (2.10)\n",
            "Collecting numcodecs>=0.6.4\n",
            "  Downloading numcodecs-0.9.1-cp37-cp37m-manylinux2010_x86_64.whl (6.2 MB)\n",
            "\u001b[K     |████████████████████████████████| 6.2 MB 29.1 MB/s \n",
            "\u001b[?25hCollecting asciitree\n",
            "  Downloading asciitree-0.3.3.tar.gz (4.0 kB)\n",
            "Collecting fasteners\n",
            "  Downloading fasteners-0.17.3-py3-none-any.whl (18 kB)\n",
            "Building wheels for collected packages: satpy, trollimage, pycoast, configobj, donfig, trollsift, asciitree\n",
            "  Building wheel for satpy (PEP 517) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for satpy: filename=satpy-0.35.0-py2.py3-none-any.whl size=1253032 sha256=7a959395623715127b33f6b4355f876632b5fe50a5837dae4df5d641efd195e5\n",
            "  Stored in directory: /root/.cache/pip/wheels/9b/34/4e/e7e5b24e36b86776e0da5ea477b90c39138d8cf64c3e87ce82\n",
            "  Building wheel for trollimage (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for trollimage: filename=trollimage-1.18.3-py2.py3-none-any.whl size=55932 sha256=5353e3b94f40daae619574b9b675f5d231a5b70814f2feec85b95d58db652677\n",
            "  Stored in directory: /root/.cache/pip/wheels/b1/f6/e1/8c48898b7812a0b1519a3f62e791d933dc358dfa02f4d90fe3\n",
            "  Building wheel for pycoast (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pycoast: filename=pycoast-1.5.0-py3-none-any.whl size=40311 sha256=ae783b5215e93ac87880af5e99870964314656d476554330ebbd2d1ae647f10b\n",
            "  Stored in directory: /root/.cache/pip/wheels/92/8f/47/4980d05e52eb72257461fd396ef11fe7e1e65f712909b9dcd8\n",
            "  Building wheel for configobj (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for configobj: filename=configobj-5.0.6-py3-none-any.whl size=34547 sha256=947cdd80a627f19a37d69c9d08a92522300f1751accc2303ed5fe62794257034\n",
            "  Stored in directory: /root/.cache/pip/wheels/0d/c4/19/13d74440f2a571841db6b6e0a273694327498884dafb9cf978\n",
            "  Building wheel for donfig (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for donfig: filename=donfig-0.7.0-py2.py3-none-any.whl size=18805 sha256=ff83af12b06253319a6cdc4ac7b3ca8b3e29f26df04d4e656abb33afbc187576\n",
            "  Stored in directory: /root/.cache/pip/wheels/ec/39/b6/97f35d24569cab0536115fd232306f5b6b73ffe57fe9eab84c\n",
            "  Building wheel for trollsift (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for trollsift: filename=trollsift-0.4.0-py2.py3-none-any.whl size=22097 sha256=f36e1192b263b771ce58f497d9fdc3069e41236045b20dff6b48abb4b9fa4051\n",
            "  Stored in directory: /root/.cache/pip/wheels/66/39/80/b8e17d7ca0eeec3cf7164b4d81f5f8565218ffb90b98850354\n",
            "  Building wheel for asciitree (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for asciitree: filename=asciitree-0.3.3-py3-none-any.whl size=5050 sha256=243da5a43ce63e1f3d8687d2edd33cbf7889210057ec17db190288632492f5e0\n",
            "  Stored in directory: /root/.cache/pip/wheels/12/1c/38/0def51e15add93bff3f4bf9c248b94db0839b980b8535e72a0\n",
            "Successfully built satpy trollimage pycoast configobj donfig trollsift asciitree\n",
            "Installing collected packages: pyyaml, pykdtree, numcodecs, fasteners, configobj, asciitree, zarr, trollsift, trollimage, snuggs, pyresample, donfig, cligj, click-plugins, aggdraw, affine, satpy, rasterio, pycoast\n",
            "  Attempting uninstall: pyyaml\n",
            "    Found existing installation: PyYAML 3.13\n",
            "    Uninstalling PyYAML-3.13:\n",
            "      Successfully uninstalled PyYAML-3.13\n",
            "Successfully installed affine-2.3.1 aggdraw-1.3.14 asciitree-0.3.3 click-plugins-1.1.1 cligj-0.7.2 configobj-5.0.6 donfig-0.7.0 fasteners-0.17.3 numcodecs-0.9.1 pycoast-1.5.0 pykdtree-1.3.4 pyresample-1.23.0 pyyaml-5.4.1 rasterio-1.2.10 satpy-0.35.0 snuggs-1.4.7 trollimage-1.18.3 trollsift-0.4.0 zarr-2.11.1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "yaml"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!pip install satpy pyyaml==5.4.1 cartopy rasterio pycoast"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7303-iYAkomb"
      },
      "outputs": [],
      "source": [
        "import cartopy\n",
        "cartopy.config['data_dir']='/content/drive/MyDrive/cartopy/'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uo1CrRTZiTie"
      },
      "source": [
        "# Membaca Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9kAO9Ld9iTie",
        "outputId": "6cc33622-2bd8-45c5-e7d3-939af598139b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ACGRDFLX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACGRDFLX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED GROUND HEAT FLUX\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACHFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACHFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWARD HEAT FLUX AT THE SURFACE\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLHF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLHF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWARD LATENT HEAT FLUX AT THE SURFACE\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSNOM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSNOM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED MELTED SNOW\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ALBBCK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ALBBCK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: BACKGROUND ALBEDO\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ALBEDO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ALBEDO(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ALBEDO\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C1F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C1F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c1f = d bf / d eta, using znu\n",
              "     units: Dimensionless\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C1H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C1H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c1h = d bf / d eta, using znw\n",
              "     units: Dimensionless\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C2F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C2F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c2f = (1-c1f)*(p0-pt)\n",
              "     units: Pa\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C2H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C2H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c2h = (1-c1h)*(p0-pt)\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C3F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C3F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c3f = bf\n",
              "     units: Dimensionless\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C3H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C3H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c3h = bh\n",
              "     units: Dimensionless\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C4F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C4F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c4f = (eta-bf)*(p0-pt)+pt, using znw\n",
              "     units: Pa\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C4H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C4H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c4h = (eta-bh)*(p0-pt)+pt, using znu\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CANWAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CANWAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: CANOPY WATER\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF1(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF2(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF3(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CFN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CFN(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CFN1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CFN1(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CLAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CLAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COMPUTATIONAL GRID LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CLDFRA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CLDFRA(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: CLOUD FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CON': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CON(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC CONVEXITY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'COSALPHA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 COSALPHA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Local cosine of map rotation\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'COSZEN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 COSZEN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COS of SOLAR ZENITH ANGLE\n",
              "     units: dimensionless\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CWM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CWM(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Total condensate mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DN(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: d(eta) values between half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DNW(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: d(eta) values between full (w) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DTAUX3D': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DTAUX3D(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: LOCAL U GWDO STRESS\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DTAUY3D': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DTAUY3D(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: LOCAL V GWDO STRESS\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DUSFCG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DUSFCG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COLUMN-INTEGRATED U GWDO STRESS\n",
              "     units: Pa m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DVSFCG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DVSFCG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COLUMN-INTEGRATED V GWDO STRESS\n",
              "     units: Pa m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DZS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DZS(Time, soil_layers_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: THICKNESSES OF SOIL LAYERS\n",
              "     units: m\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'E': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 E(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Coriolis cosine latitude term\n",
              "     units: s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'EMISS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 EMISS(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE EMISSIVITY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Coriolis sine latitude term\n",
              "     units: s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'FNM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 FNM(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: upper weight for vertical stretching\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'FNP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 FNP(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: lower weight for vertical stretching\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_ICE_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_ICE_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: FRACTION OF ICE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_RAIN_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_RAIN_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: FRACTION OF RAIN\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_RIMEF_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_RIMEF_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: MASS RATIO OF RIMED ICE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GLW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GLW(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: DOWNWARD LONG WAVE FLUX AT GROUND SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GRAUPELNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GRAUPELNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE GRAUPEL\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GRDFLX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GRDFLX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: GROUND HEAT FLUX\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HAILNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HAILNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE HAIL\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UPWARD HEAT FLUX AT THE SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface sensible heat flux\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface sensible heat flux tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HGT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HGT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Terrain Height\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ISEEDARRAY_SPP_CONV': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_CONV(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT2\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARRAY_SPP_LSM': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_LSM(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT4\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARRAY_SPP_PBL': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_PBL(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT3\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_RAND_PERTURB': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_RAND_PERTURB(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_SKEBS': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_SKEBS(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, SKEBS\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_SPPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_SPPT(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, SPPT\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISLTYP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISLTYP(Time, south_north, west_east)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: XY \n",
              "     description: DOMINANT SOIL CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ITIMESTEP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ITIMESTEP(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: \n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'IVGTYP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 IVGTYP(Time, south_north, west_east)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: XY \n",
              "     description: DOMINANT VEGETATION CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'LAI': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LAI(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LEAF AREA INDEX\n",
              "     units: m-2/m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LAKEMASK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LAKEMASK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAKE MASK (1 FOR LAKE, 0 FOR NON-LAKE)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LANDMASK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LANDMASK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND MASK (1 FOR LAND, 0 FOR WATER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATENT HEAT FLUX AT THE SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface latent heat flux\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface latent heat flux tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LU_INDEX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LU_INDEX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND USE CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_M': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_M(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_MX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_MX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid, x direction\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_MY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_MY(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid, y direction\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_UX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_UX(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid, x direction\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_UY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_UY(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid, y direction\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_VX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_VX(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid, x direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_VY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_VY(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid, y direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAX_MSTFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAX_MSTFX(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: Max map factor in domain\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAX_MSTFY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAX_MSTFY(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: Max map factor in domain\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MF_VX_INV': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MF_VX_INV(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Inverse map scale factor on v-grid, x direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MU': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MU(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: perturbation dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MUB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MUB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: base state dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'NEST_POS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 NEST_POS(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: -\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'NOAHRES': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 NOAHRES(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: RESIDUAL OF THE NOAH SURFACE ENERGY BUDGET\n",
              "     units: W m{-2}\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA1(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA3(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA4': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA4(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL1(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL3(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL4': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL4(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OLR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OLR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: TOA OUTGOING LONG WAVE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation pressure\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P00': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P00(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE PRESURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PB(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: BASE STATE PRESSURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PBLH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PBLH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: PBL HEIGHT\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: perturbation dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PCB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PCB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: base state dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PH(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation geopotential\n",
              "     units: m2 s-2\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PHB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PHB(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: base-state geopotential\n",
              "     units: m2 s-2\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PSFC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PSFC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SFC PRESSURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_HYD': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_HYD(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: hydrostatic pressure\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_STRAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_STRAT(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE PRESSURE AT BOTTOM OF STRATOSPHERE\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_TOP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_TOP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: PRESSURE TOP OF THE MODEL\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'Q2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 Q2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: QV at 2 M\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QCLOUD': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QCLOUD(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Cloud water mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UPWARD MOISTURE FLUX AT THE SURFACE\n",
              "     units: kg m-2 s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QICE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QICE(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Ice mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QRAIN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QRAIN(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Rain water mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QVAPOR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QVAPOR(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Water vapor mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL CUMULUS PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINSH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINSH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED SHALLOW CUMULUS PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDN(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: inverse d(eta) values between half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDNW(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: inverse d(eta) values between full (w) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDX(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: INVERSE X GRID LENGTH\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDY(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: INVERSE Y GRID LENGTH\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RESM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RESM(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: TIME WEIGHT CONSTANT FOR SMALL STEPS\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SAVE_TOPO_FROM_REAL': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 SAVE_TOPO_FROM_REAL(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: 1=original topo from real/0=topo modified by WRF\n",
              "     units: flag\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'SEAICE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SEAICE(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA ICE FLAG\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SFROFF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SFROFF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE RUNOFF\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SH2O': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SH2O(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL LIQUID WATER\n",
              "     units: m3 m-3\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SHDMAX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SHDMAX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MAX VEG FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SHDMIN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SHDMIN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MIN VEG FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SINALPHA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SINALPHA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Local sine of map rotation\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SMCREL': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SMCREL(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: RELATIVE SOIL MOISTURE\n",
              "     units: \n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SMOIS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SMOIS(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL MOISTURE\n",
              "     units: m3 m-3\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOALB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOALB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MAX SNOW ALBEDO IN FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOW(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SNOW WATER EQUIVALENT\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: FLAG INDICATING SNOW COVERAGE (1 FOR SNOW COVER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: PHYSICAL SNOW DEPTH\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE SNOW AND ICE\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: fraction of frozen precipitation\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SST': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SST(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA SURFACE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SSTSK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SSTSK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SKIN SEA SURFACE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SST_INPUT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SST_INPUT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA SURFACE TEMPERATURE FROM WRFLOWINPUT FILE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDOWN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDOWN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: DOWNWARD SHORT WAVE FLUX AT GROUND SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWNORM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWNORM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: NORMAL SHORT WAVE FLUX AT GROUND SURFACE (SLOPE-DEPENDENT)\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation potential temperature theta-t0\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T00': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T00(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: TEMP at 2 M\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TH2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TH2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: POT TEMP at 2 M\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'THIS_IS_AN_IDEAL_RUN': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 THIS_IS_AN_IDEAL_RUN(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: T/F flag: this is an ARW ideal simulation\n",
              "     units: -\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'THM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 THM(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: either 1) pert moist pot temp=(1+Rv/Rd Qv)*(theta)-T0, or 2) pert dry pot temp=t\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TISO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TISO(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: TEMP AT WHICH THE BASE T TURNS CONST\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TLP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TLP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE LAPSE RATE\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TLP_STRAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TLP_STRAT(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE LAPSE RATE (DT/D(LN(P)) IN STRATOSPHERE\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TMN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TMN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SOIL TEMPERATURE AT LOWER BOUNDARY\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE SKIN TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface skin temperature\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface skin temperature tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSLB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSLB(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL TEMPERATURE\n",
              "     units: K\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'Times': <class 'netCDF4._netCDF4.Variable'>\n",
              " |S1 Times(Time, DateStrLen)\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 19)\n",
              " filling on, default _FillValue of \u0000 used,\n",
              " 'U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 U(Time, bottom_top, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: x-wind component\n",
              "     units: m s-1\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'U10': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 U10(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: U at 10 M\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'UDROFF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 UDROFF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UNDERGROUND RUNOFF\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'UST': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 UST(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: U* IN SIMILARITY THEORY\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 V(Time, bottom_top, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: y-wind component\n",
              "     units: m s-1\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'V10': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 V10(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: V at 10 M\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VAR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VAR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC VARIANCE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VAR_SSO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VAR_SSO(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: variance of subgrid-scale orography\n",
              "     units: m2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VEGFRA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VEGFRA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: VEGETATION FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'W': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 W(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: z-wind component\n",
              "     units: m s-1\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XICEM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XICEM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA ICE FLAG (PREVIOUS STEP)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAND(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND MASK (1 FOR LAND, 2 FOR WATER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XTIME': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XTIME(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: minutes since 2019-02-23 00:00:00\n",
              "     units: minutes since 2019-02-23 00:00:00\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZETATOP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZETATOP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: ZETA AT MODEL TOP\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZNU': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZNU(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: eta values on half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZNW(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: eta values on full (w) levels\n",
              "     units: \n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZS(Time, soil_layers_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: DEPTHS OF CENTERS OF SOIL LAYERS\n",
              "     units: m\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used}"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# read data nc\n",
        "nc = Dataset('/content/drive/MyDrive/grup2mpcn/wrfout_d02_2019-02-23_00_00_00')\n",
        "#nc = Dataset('drive/MyDrive/data_wrf/wrfout_d01')\n",
        "nc.variables\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RwmR9a4AiTif"
      },
      "source": [
        "Cara mencari kode variabel: ctrl+f untuk mencari kata kunci berdasarkan hasil keluaran nc.variables, beberapa variabel dapat dipanggil secara implisit (tidak ada di nc.variables atau mempunyai nama lain) dengan fungsi wrf.getvar:\n",
        "\n",
        "https://wrf-python.readthedocs.io/en/latest/user_api/generated/wrf.getvar.html#wrf.getvar\n",
        "\n",
        "Untuk list variabel yang umum dikeluarkan WRF (ada di nc.variables):\n",
        "http://www.meteo.unican.es/wiki/cordexwrf/OutputVariables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "W3mLX9ldiTif",
        "outputId": "7dc612ab-849c-4270-c114-a58e0b67e4c1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'temp' (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[[304.68475, 304.68573, 304.68674, ..., 304.71936, 304.72562,\n",
              "          304.7319 ],\n",
              "         [304.6834 , 304.68347, 304.68372, ..., 304.7359 , 304.74225,\n",
              "          304.74866],\n",
              "         [304.6822 , 304.68152, 304.68097, ..., 304.75076, 304.75726,\n",
              "          304.76367],\n",
              "         ...,\n",
              "         [305.02066, 305.08853, 305.1514 , ..., 304.92093, 304.915  ,\n",
              "          304.90918],\n",
              "         [305.0039 , 305.0721 , 305.13535, ..., 304.9194 , 304.91418,\n",
              "          304.90897],\n",
              "         [304.98718, 305.05582, 305.1195 , ..., 304.91687, 304.91235,\n",
              "          304.90775]],\n",
              "\n",
              "        [[303.79178, 303.79846, 303.8053 , ..., 303.91837, 303.92526,\n",
              "          303.93225],\n",
              "         [303.7927 , 303.79828, 303.80414, ..., 303.93756, 303.9446 ,\n",
              "          303.95163],\n",
              "         [303.79398, 303.79865, 303.80338, ..., 303.95563, 303.9627 ,\n",
              "          303.96982],\n",
              "...\n",
              "         [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "          195.13304],\n",
              "         [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "          195.18985],\n",
              "         [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "          195.24368]],\n",
              "\n",
              "        [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "          203.13927],\n",
              "         [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "          203.15692],\n",
              "         [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "          203.17711],\n",
              "         ...,\n",
              "         [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "          205.75624],\n",
              "         [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "          205.71774],\n",
              "         [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "          205.68997]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;temp&#x27; (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[[304.68475, 304.68573, 304.68674, ..., 304.71936, 304.72562,\n",
              "          304.7319 ],\n",
              "         [304.6834 , 304.68347, 304.68372, ..., 304.7359 , 304.74225,\n",
              "          304.74866],\n",
              "         [304.6822 , 304.68152, 304.68097, ..., 304.75076, 304.75726,\n",
              "          304.76367],\n",
              "         ...,\n",
              "         [305.02066, 305.08853, 305.1514 , ..., 304.92093, 304.915  ,\n",
              "          304.90918],\n",
              "         [305.0039 , 305.0721 , 305.13535, ..., 304.9194 , 304.91418,\n",
              "          304.90897],\n",
              "         [304.98718, 305.05582, 305.1195 , ..., 304.91687, 304.91235,\n",
              "          304.90775]],\n",
              "\n",
              "        [[303.79178, 303.79846, 303.8053 , ..., 303.91837, 303.92526,\n",
              "          303.93225],\n",
              "         [303.7927 , 303.79828, 303.80414, ..., 303.93756, 303.9446 ,\n",
              "          303.95163],\n",
              "         [303.79398, 303.79865, 303.80338, ..., 303.95563, 303.9627 ,\n",
              "          303.96982],\n",
              "...\n",
              "         [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "          195.13304],\n",
              "         [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "          195.18985],\n",
              "         [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "          195.24368]],\n",
              "\n",
              "        [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "          203.13927],\n",
              "         [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "          203.15692],\n",
              "         [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "          203.17711],\n",
              "         ...,\n",
              "         [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "          205.75624],\n",
              "         [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "          205.71774],\n",
              "         [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "          205.68997]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'temp'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-1d1157ac-40af-4f6f-9f12-c8a6ba62470b' class='xr-array-in' type='checkbox' checked><label for='section-1d1157ac-40af-4f6f-9f12-c8a6ba62470b' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>304.7 304.7 304.7 304.7 304.7 304.7 ... 205.9 205.8 205.8 205.7 205.7</span></div><div class='xr-array-data'><pre>array([[[[304.68475, 304.68573, 304.68674, ..., 304.71936, 304.72562,\n",
              "          304.7319 ],\n",
              "         [304.6834 , 304.68347, 304.68372, ..., 304.7359 , 304.74225,\n",
              "          304.74866],\n",
              "         [304.6822 , 304.68152, 304.68097, ..., 304.75076, 304.75726,\n",
              "          304.76367],\n",
              "         ...,\n",
              "         [305.02066, 305.08853, 305.1514 , ..., 304.92093, 304.915  ,\n",
              "          304.90918],\n",
              "         [305.0039 , 305.0721 , 305.13535, ..., 304.9194 , 304.91418,\n",
              "          304.90897],\n",
              "         [304.98718, 305.05582, 305.1195 , ..., 304.91687, 304.91235,\n",
              "          304.90775]],\n",
              "\n",
              "        [[303.79178, 303.79846, 303.8053 , ..., 303.91837, 303.92526,\n",
              "          303.93225],\n",
              "         [303.7927 , 303.79828, 303.80414, ..., 303.93756, 303.9446 ,\n",
              "          303.95163],\n",
              "         [303.79398, 303.79865, 303.80338, ..., 303.95563, 303.9627 ,\n",
              "          303.96982],\n",
              "...\n",
              "         [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "          195.13304],\n",
              "         [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "          195.18985],\n",
              "         [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "          195.24368]],\n",
              "\n",
              "        [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "          203.13927],\n",
              "         [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "          203.15692],\n",
              "         [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "          203.17711],\n",
              "         ...,\n",
              "         [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "          205.75624],\n",
              "         [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "          205.71774],\n",
              "         [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "          205.68997]]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-2bc5f760-3071-4471-9334-590ca362e003' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2bc5f760-3071-4471-9334-590ca362e003' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-03c46613-b9a0-486d-812d-1be301899af8' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-03c46613-b9a0-486d-812d-1be301899af8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5934bde3-8775-4a8c-a37a-aafdbe903619' class='xr-var-data-in' type='checkbox'><label for='data-5934bde3-8775-4a8c-a37a-aafdbe903619' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-9dc6f2d4-9abe-4f87-ab00-4297a52e9c05' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9dc6f2d4-9abe-4f87-ab00-4297a52e9c05' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-506b665f-7c0f-452a-976d-a84c34305078' class='xr-var-data-in' type='checkbox'><label for='data-506b665f-7c0f-452a-976d-a84c34305078' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-52cda72a-975e-401e-b129-9d4e6e931b35' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-52cda72a-975e-401e-b129-9d4e6e931b35' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1330ae4f-cd27-47fd-965b-0bdaf78c3d75' class='xr-var-data-in' type='checkbox'><label for='data-1330ae4f-cd27-47fd-965b-0bdaf78c3d75' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23 ... 2019-02-24</div><input id='attrs-5843acc0-448e-4ca2-ae46-9dde5ce98e1b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5843acc0-448e-4ca2-ae46-9dde5ce98e1b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4df17bc8-4785-429b-b232-df252e902b78' class='xr-var-data-in' type='checkbox'><label for='data-4df17bc8-4785-429b-b232-df252e902b78' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f44b0e15-46a7-4bd1-acff-cec04778fd5e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f44b0e15-46a7-4bd1-acff-cec04778fd5e' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XYZ</dd><dt><span>description :</span></dt><dd>temperature</dd><dt><span>units :</span></dt><dd>K</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "temp = wrf.getvar(nc,'temp',timeidx=wrf.ALL_TIMES)\n",
        "temp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FAF-rBUbiTig",
        "outputId": "9d397308-86d1-4b98-e106-f94b4e021373"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'height' (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[[   26.614447,    26.613981,    26.614588, ...,    26.58414 ,\n",
              "             26.585096,    26.585526],\n",
              "         [   26.613695,    26.613676,    26.613676, ...,    26.585728,\n",
              "             26.585629,    26.586073],\n",
              "         [   26.612385,    26.612835,    26.612223, ...,    26.586098,\n",
              "             26.58708 ,    26.587526],\n",
              "         ...,\n",
              "         [   26.610777,    26.615246,    26.61983 , ...,    26.58429 ,\n",
              "             26.583134,    26.582508],\n",
              "         [   26.6092  ,    26.614243,    26.619385, ...,    26.58351 ,\n",
              "             26.582947,    26.58237 ],\n",
              "         [   26.608149,    26.613232,    26.617876, ...,    26.583185,\n",
              "             26.582682,    26.582153]],\n",
              "\n",
              "        [[   87.17551 ,    87.176056,    87.1777  , ...,    87.09453 ,\n",
              "             87.096985,    87.09839 ],\n",
              "         [   87.17331 ,    87.17409 ,    87.174934, ...,    87.09944 ,\n",
              "             87.0998  ,    87.10124 ],\n",
              "         [   87.170555,    87.17215 ,    87.17162 , ...,    87.101814,\n",
              "             87.10434 ,    87.10579 ],\n",
              "...\n",
              "         [18975.668   , 18975.787   , 18975.863   , ..., 18958.729   ,\n",
              "          18958.78    , 18958.89    ],\n",
              "         [18975.617   , 18975.871   , 18975.986   , ..., 18958.736   ,\n",
              "          18958.78    , 18958.867   ],\n",
              "         [18975.557   , 18975.672   , 18975.746   , ..., 18958.762   ,\n",
              "          18958.797   , 18958.824   ]],\n",
              "\n",
              "        [[20012.38    , 20012.38    , 20012.387   , ..., 19997.158   ,\n",
              "          19997.104   , 19997.049   ],\n",
              "         [20012.244   , 20011.906   , 20011.947   , ..., 19997.17    ,\n",
              "          19997.113   , 19997.045   ],\n",
              "         [20012.102   , 20011.803   , 20011.84    , ..., 19997.164   ,\n",
              "          19997.098   , 19997.03    ],\n",
              "         ...,\n",
              "         [20000.697   , 20000.814   , 20000.889   , ..., 19987.36    ,\n",
              "          19987.393   , 19987.537   ],\n",
              "         [20000.75    , 20000.96    , 20001.027   , ..., 19987.389   ,\n",
              "          19987.416   , 19987.557   ],\n",
              "         [20000.785   , 20000.809   , 20000.809   , ..., 19987.6     ,\n",
              "          19987.588   , 19987.57    ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  model height - [MSL] (mass grid)\n",
              "    units:        m\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;height&#x27; (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[[   26.614447,    26.613981,    26.614588, ...,    26.58414 ,\n",
              "             26.585096,    26.585526],\n",
              "         [   26.613695,    26.613676,    26.613676, ...,    26.585728,\n",
              "             26.585629,    26.586073],\n",
              "         [   26.612385,    26.612835,    26.612223, ...,    26.586098,\n",
              "             26.58708 ,    26.587526],\n",
              "         ...,\n",
              "         [   26.610777,    26.615246,    26.61983 , ...,    26.58429 ,\n",
              "             26.583134,    26.582508],\n",
              "         [   26.6092  ,    26.614243,    26.619385, ...,    26.58351 ,\n",
              "             26.582947,    26.58237 ],\n",
              "         [   26.608149,    26.613232,    26.617876, ...,    26.583185,\n",
              "             26.582682,    26.582153]],\n",
              "\n",
              "        [[   87.17551 ,    87.176056,    87.1777  , ...,    87.09453 ,\n",
              "             87.096985,    87.09839 ],\n",
              "         [   87.17331 ,    87.17409 ,    87.174934, ...,    87.09944 ,\n",
              "             87.0998  ,    87.10124 ],\n",
              "         [   87.170555,    87.17215 ,    87.17162 , ...,    87.101814,\n",
              "             87.10434 ,    87.10579 ],\n",
              "...\n",
              "         [18975.668   , 18975.787   , 18975.863   , ..., 18958.729   ,\n",
              "          18958.78    , 18958.89    ],\n",
              "         [18975.617   , 18975.871   , 18975.986   , ..., 18958.736   ,\n",
              "          18958.78    , 18958.867   ],\n",
              "         [18975.557   , 18975.672   , 18975.746   , ..., 18958.762   ,\n",
              "          18958.797   , 18958.824   ]],\n",
              "\n",
              "        [[20012.38    , 20012.38    , 20012.387   , ..., 19997.158   ,\n",
              "          19997.104   , 19997.049   ],\n",
              "         [20012.244   , 20011.906   , 20011.947   , ..., 19997.17    ,\n",
              "          19997.113   , 19997.045   ],\n",
              "         [20012.102   , 20011.803   , 20011.84    , ..., 19997.164   ,\n",
              "          19997.098   , 19997.03    ],\n",
              "         ...,\n",
              "         [20000.697   , 20000.814   , 20000.889   , ..., 19987.36    ,\n",
              "          19987.393   , 19987.537   ],\n",
              "         [20000.75    , 20000.96    , 20001.027   , ..., 19987.389   ,\n",
              "          19987.416   , 19987.557   ],\n",
              "         [20000.785   , 20000.809   , 20000.809   , ..., 19987.6     ,\n",
              "          19987.588   , 19987.57    ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  model height - [MSL] (mass grid)\n",
              "    units:        m\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'height'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-5d7fc67f-ab3e-44e8-b733-b84189797e61' class='xr-array-in' type='checkbox' checked><label for='section-5d7fc67f-ab3e-44e8-b733-b84189797e61' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>26.61 26.61 26.61 26.61 ... 1.999e+04 1.999e+04 1.999e+04 1.999e+04</span></div><div class='xr-array-data'><pre>array([[[[   26.614447,    26.613981,    26.614588, ...,    26.58414 ,\n",
              "             26.585096,    26.585526],\n",
              "         [   26.613695,    26.613676,    26.613676, ...,    26.585728,\n",
              "             26.585629,    26.586073],\n",
              "         [   26.612385,    26.612835,    26.612223, ...,    26.586098,\n",
              "             26.58708 ,    26.587526],\n",
              "         ...,\n",
              "         [   26.610777,    26.615246,    26.61983 , ...,    26.58429 ,\n",
              "             26.583134,    26.582508],\n",
              "         [   26.6092  ,    26.614243,    26.619385, ...,    26.58351 ,\n",
              "             26.582947,    26.58237 ],\n",
              "         [   26.608149,    26.613232,    26.617876, ...,    26.583185,\n",
              "             26.582682,    26.582153]],\n",
              "\n",
              "        [[   87.17551 ,    87.176056,    87.1777  , ...,    87.09453 ,\n",
              "             87.096985,    87.09839 ],\n",
              "         [   87.17331 ,    87.17409 ,    87.174934, ...,    87.09944 ,\n",
              "             87.0998  ,    87.10124 ],\n",
              "         [   87.170555,    87.17215 ,    87.17162 , ...,    87.101814,\n",
              "             87.10434 ,    87.10579 ],\n",
              "...\n",
              "         [18975.668   , 18975.787   , 18975.863   , ..., 18958.729   ,\n",
              "          18958.78    , 18958.89    ],\n",
              "         [18975.617   , 18975.871   , 18975.986   , ..., 18958.736   ,\n",
              "          18958.78    , 18958.867   ],\n",
              "         [18975.557   , 18975.672   , 18975.746   , ..., 18958.762   ,\n",
              "          18958.797   , 18958.824   ]],\n",
              "\n",
              "        [[20012.38    , 20012.38    , 20012.387   , ..., 19997.158   ,\n",
              "          19997.104   , 19997.049   ],\n",
              "         [20012.244   , 20011.906   , 20011.947   , ..., 19997.17    ,\n",
              "          19997.113   , 19997.045   ],\n",
              "         [20012.102   , 20011.803   , 20011.84    , ..., 19997.164   ,\n",
              "          19997.098   , 19997.03    ],\n",
              "         ...,\n",
              "         [20000.697   , 20000.814   , 20000.889   , ..., 19987.36    ,\n",
              "          19987.393   , 19987.537   ],\n",
              "         [20000.75    , 20000.96    , 20001.027   , ..., 19987.389   ,\n",
              "          19987.416   , 19987.557   ],\n",
              "         [20000.785   , 20000.809   , 20000.809   , ..., 19987.6     ,\n",
              "          19987.588   , 19987.57    ]]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-e20839bf-62af-4fa3-882b-2d937021e9fb' class='xr-section-summary-in' type='checkbox'  checked><label for='section-e20839bf-62af-4fa3-882b-2d937021e9fb' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-0656034e-ce8d-4b81-a2a4-38785e5e2b2d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0656034e-ce8d-4b81-a2a4-38785e5e2b2d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8ba1a104-4828-4103-9e65-9cda2b5ee29a' class='xr-var-data-in' type='checkbox'><label for='data-8ba1a104-4828-4103-9e65-9cda2b5ee29a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-5b73da57-7dcc-4483-b4e7-a3822a44f184' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5b73da57-7dcc-4483-b4e7-a3822a44f184' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d3db3d36-db83-4419-b0d8-af7a853b6270' class='xr-var-data-in' type='checkbox'><label for='data-d3db3d36-db83-4419-b0d8-af7a853b6270' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-142758cc-0651-4af8-bded-ffa4ea00db0d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-142758cc-0651-4af8-bded-ffa4ea00db0d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d752d190-e43b-4d98-903a-259a06b832f6' class='xr-var-data-in' type='checkbox'><label for='data-d752d190-e43b-4d98-903a-259a06b832f6' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23 ... 2019-02-24</div><input id='attrs-c2f3f6c9-3bd7-45b5-8219-1de6c4222fa9' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c2f3f6c9-3bd7-45b5-8219-1de6c4222fa9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3421dec2-5824-48be-911f-c3761c72e1b2' class='xr-var-data-in' type='checkbox'><label for='data-3421dec2-5824-48be-911f-c3761c72e1b2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-c0353231-e631-4144-a0e8-b22360ede90d' class='xr-section-summary-in' type='checkbox'  checked><label for='section-c0353231-e631-4144-a0e8-b22360ede90d' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XYZ</dd><dt><span>description :</span></dt><dd>model height - [MSL] (mass grid)</dd><dt><span>units :</span></dt><dd>m</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "height = wrf.getvar(nc,'height',timeidx=wrf.ALL_TIMES)\n",
        "height"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6v7MU3hAiTih",
        "outputId": "52a9f149-c812-4f4e-c347-8886cb6c0dac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'temp' (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[[  88.76255 ,   88.764305,   88.76612 , ...,   88.824844,\n",
              "            88.836105,   88.84742 ],\n",
              "         [  88.76013 ,   88.76025 ,   88.76068 , ...,   88.854614,\n",
              "            88.86604 ,   88.87758 ],\n",
              "         [  88.757935,   88.75673 ,   88.75574 , ...,   88.88137 ,\n",
              "            88.89307 ,   88.9046  ],\n",
              "         ...,\n",
              "         [  89.36718 ,   89.48935 ,   89.60251 , ...,   89.18767 ,\n",
              "            89.17701 ,   89.16652 ],\n",
              "         [  89.33703 ,   89.4598  ,   89.573616, ...,   89.18492 ,\n",
              "            89.17553 ,   89.16613 ],\n",
              "         [  89.30692 ,   89.430466,   89.545105, ...,   89.18036 ,\n",
              "            89.17223 ,   89.16393 ]],\n",
              "\n",
              "        [[  87.1552  ,   87.16723 ,   87.17953 , ...,   87.38305 ,\n",
              "            87.39547 ,   87.40804 ],\n",
              "         [  87.156845,   87.16689 ,   87.177444, ...,   87.4176  ,\n",
              "            87.43029 ,   87.442924],\n",
              "         [  87.15915 ,   87.16756 ,   87.17607 , ...,   87.45013 ,\n",
              "            87.46287 ,   87.47567 ],\n",
              "...\n",
              "         [-105.965546, -105.98395 , -105.98005 , ..., -108.61581 ,\n",
              "          -108.526436, -108.43052 ],\n",
              "         [-105.829895, -105.81064 , -105.825745, ..., -108.51292 ,\n",
              "          -108.42574 , -108.32827 ],\n",
              "         [-105.73335 , -105.729866, -105.75991 , ..., -108.36645 ,\n",
              "          -108.296135, -108.23137 ]],\n",
              "\n",
              "        [[ -93.59966 ,  -93.62136 ,  -93.64589 , ...,  -94.11149 ,\n",
              "           -94.065895,  -94.01932 ],\n",
              "         [ -93.6435  ,  -93.70335 ,  -93.736694, ...,  -94.085396,\n",
              "           -94.03808 ,  -93.98754 ],\n",
              "         [ -93.71088 ,  -93.78146 ,  -93.82371 , ...,  -94.037636,\n",
              "           -93.995804,  -93.9512  ],\n",
              "         ...,\n",
              "         [ -94.32627 ,  -94.30004 ,  -94.30048 , ...,  -89.120895,\n",
              "           -89.2237  ,  -89.30876 ],\n",
              "         [ -94.387054,  -94.42693 ,  -94.44424 , ...,  -89.2059  ,\n",
              "           -89.305275,  -89.37806 ],\n",
              "         [ -94.37991 ,  -94.42609 ,  -94.42609 , ...,  -89.23752 ,\n",
              "           -89.3359  ,  -89.42805 ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...\n",
              "    units:        degree_Fahrenheit"
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;temp&#x27; (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[[  88.76255 ,   88.764305,   88.76612 , ...,   88.824844,\n",
              "            88.836105,   88.84742 ],\n",
              "         [  88.76013 ,   88.76025 ,   88.76068 , ...,   88.854614,\n",
              "            88.86604 ,   88.87758 ],\n",
              "         [  88.757935,   88.75673 ,   88.75574 , ...,   88.88137 ,\n",
              "            88.89307 ,   88.9046  ],\n",
              "         ...,\n",
              "         [  89.36718 ,   89.48935 ,   89.60251 , ...,   89.18767 ,\n",
              "            89.17701 ,   89.16652 ],\n",
              "         [  89.33703 ,   89.4598  ,   89.573616, ...,   89.18492 ,\n",
              "            89.17553 ,   89.16613 ],\n",
              "         [  89.30692 ,   89.430466,   89.545105, ...,   89.18036 ,\n",
              "            89.17223 ,   89.16393 ]],\n",
              "\n",
              "        [[  87.1552  ,   87.16723 ,   87.17953 , ...,   87.38305 ,\n",
              "            87.39547 ,   87.40804 ],\n",
              "         [  87.156845,   87.16689 ,   87.177444, ...,   87.4176  ,\n",
              "            87.43029 ,   87.442924],\n",
              "         [  87.15915 ,   87.16756 ,   87.17607 , ...,   87.45013 ,\n",
              "            87.46287 ,   87.47567 ],\n",
              "...\n",
              "         [-105.965546, -105.98395 , -105.98005 , ..., -108.61581 ,\n",
              "          -108.526436, -108.43052 ],\n",
              "         [-105.829895, -105.81064 , -105.825745, ..., -108.51292 ,\n",
              "          -108.42574 , -108.32827 ],\n",
              "         [-105.73335 , -105.729866, -105.75991 , ..., -108.36645 ,\n",
              "          -108.296135, -108.23137 ]],\n",
              "\n",
              "        [[ -93.59966 ,  -93.62136 ,  -93.64589 , ...,  -94.11149 ,\n",
              "           -94.065895,  -94.01932 ],\n",
              "         [ -93.6435  ,  -93.70335 ,  -93.736694, ...,  -94.085396,\n",
              "           -94.03808 ,  -93.98754 ],\n",
              "         [ -93.71088 ,  -93.78146 ,  -93.82371 , ...,  -94.037636,\n",
              "           -93.995804,  -93.9512  ],\n",
              "         ...,\n",
              "         [ -94.32627 ,  -94.30004 ,  -94.30048 , ...,  -89.120895,\n",
              "           -89.2237  ,  -89.30876 ],\n",
              "         [ -94.387054,  -94.42693 ,  -94.44424 , ...,  -89.2059  ,\n",
              "           -89.305275,  -89.37806 ],\n",
              "         [ -94.37991 ,  -94.42609 ,  -94.42609 , ...,  -89.23752 ,\n",
              "           -89.3359  ,  -89.42805 ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...\n",
              "    units:        degree_Fahrenheit</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'temp'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-6147ee11-d701-4d7b-8923-4e4f5724d29f' class='xr-array-in' type='checkbox' checked><label for='section-6147ee11-d701-4d7b-8923-4e4f5724d29f' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>88.76 88.76 88.77 88.77 88.77 ... -89.04 -89.14 -89.24 -89.34 -89.43</span></div><div class='xr-array-data'><pre>array([[[[  88.76255 ,   88.764305,   88.76612 , ...,   88.824844,\n",
              "            88.836105,   88.84742 ],\n",
              "         [  88.76013 ,   88.76025 ,   88.76068 , ...,   88.854614,\n",
              "            88.86604 ,   88.87758 ],\n",
              "         [  88.757935,   88.75673 ,   88.75574 , ...,   88.88137 ,\n",
              "            88.89307 ,   88.9046  ],\n",
              "         ...,\n",
              "         [  89.36718 ,   89.48935 ,   89.60251 , ...,   89.18767 ,\n",
              "            89.17701 ,   89.16652 ],\n",
              "         [  89.33703 ,   89.4598  ,   89.573616, ...,   89.18492 ,\n",
              "            89.17553 ,   89.16613 ],\n",
              "         [  89.30692 ,   89.430466,   89.545105, ...,   89.18036 ,\n",
              "            89.17223 ,   89.16393 ]],\n",
              "\n",
              "        [[  87.1552  ,   87.16723 ,   87.17953 , ...,   87.38305 ,\n",
              "            87.39547 ,   87.40804 ],\n",
              "         [  87.156845,   87.16689 ,   87.177444, ...,   87.4176  ,\n",
              "            87.43029 ,   87.442924],\n",
              "         [  87.15915 ,   87.16756 ,   87.17607 , ...,   87.45013 ,\n",
              "            87.46287 ,   87.47567 ],\n",
              "...\n",
              "         [-105.965546, -105.98395 , -105.98005 , ..., -108.61581 ,\n",
              "          -108.526436, -108.43052 ],\n",
              "         [-105.829895, -105.81064 , -105.825745, ..., -108.51292 ,\n",
              "          -108.42574 , -108.32827 ],\n",
              "         [-105.73335 , -105.729866, -105.75991 , ..., -108.36645 ,\n",
              "          -108.296135, -108.23137 ]],\n",
              "\n",
              "        [[ -93.59966 ,  -93.62136 ,  -93.64589 , ...,  -94.11149 ,\n",
              "           -94.065895,  -94.01932 ],\n",
              "         [ -93.6435  ,  -93.70335 ,  -93.736694, ...,  -94.085396,\n",
              "           -94.03808 ,  -93.98754 ],\n",
              "         [ -93.71088 ,  -93.78146 ,  -93.82371 , ...,  -94.037636,\n",
              "           -93.995804,  -93.9512  ],\n",
              "         ...,\n",
              "         [ -94.32627 ,  -94.30004 ,  -94.30048 , ...,  -89.120895,\n",
              "           -89.2237  ,  -89.30876 ],\n",
              "         [ -94.387054,  -94.42693 ,  -94.44424 , ...,  -89.2059  ,\n",
              "           -89.305275,  -89.37806 ],\n",
              "         [ -94.37991 ,  -94.42609 ,  -94.42609 , ...,  -89.23752 ,\n",
              "           -89.3359  ,  -89.42805 ]]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-e4253eac-a6bd-4606-a403-abae9882a047' class='xr-section-summary-in' type='checkbox'  checked><label for='section-e4253eac-a6bd-4606-a403-abae9882a047' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-3532317f-05d0-448f-ad63-f564f5fafa6f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3532317f-05d0-448f-ad63-f564f5fafa6f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e7c3139f-118f-40d6-9be9-3f98d6c69aea' class='xr-var-data-in' type='checkbox'><label for='data-e7c3139f-118f-40d6-9be9-3f98d6c69aea' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-18882614-b191-4478-b3ba-539ec7bf9196' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-18882614-b191-4478-b3ba-539ec7bf9196' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5d7b5d1a-04a4-49a8-8c58-479908f8278e' class='xr-var-data-in' type='checkbox'><label for='data-5d7b5d1a-04a4-49a8-8c58-479908f8278e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-ac7241da-e91f-4839-af97-47925e5ae071' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ac7241da-e91f-4839-af97-47925e5ae071' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ddd39f06-e729-4a20-a1ab-a55eaf604b3e' class='xr-var-data-in' type='checkbox'><label for='data-ddd39f06-e729-4a20-a1ab-a55eaf604b3e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23 ... 2019-02-24</div><input id='attrs-bc4db57d-b8c5-46be-ae44-ab760bbae40a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bc4db57d-b8c5-46be-ae44-ab760bbae40a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c35f0d13-77ba-42fd-9fe8-226ecdd36f74' class='xr-var-data-in' type='checkbox'><label for='data-c35f0d13-77ba-42fd-9fe8-226ecdd36f74' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-c0a1ca29-81ae-4a2c-89e5-1ce00ecf6fac' class='xr-section-summary-in' type='checkbox'  checked><label for='section-c0a1ca29-81ae-4a2c-89e5-1ce00ecf6fac' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XYZ</dd><dt><span>description :</span></dt><dd>temperature</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd><dt><span>units :</span></dt><dd>degree_Fahrenheit</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "#Konversi satuan data\n",
        "\"\"\"Dokumentasi\n",
        "    https://unidata.github.io/MetPy/latest/tutorials/unit_tutorial.html\n",
        "    https://unidata.github.io/MetPy/latest/tutorials/xarray_tutorial.html\n",
        "\"\"\"\n",
        "\n",
        "temp.metpy.convert_units('degF').metpy.dequantify()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 923
        },
        "id": "F5m2gTbEiTih",
        "outputId": "eb82f5cb-9eca-4d8c-d883-90f671bd8b11"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[[   260.99747,    260.9929 ,    260.99884, ...,    260.7003 ,\n",
              "             260.70963,    260.71387],\n",
              "         [   260.99008,    260.9899 ,    260.9899 , ...,    260.71582,\n",
              "             260.71484,    260.7192 ],\n",
              "         [   260.97723,    260.98166,    260.97565, ...,    260.71945,\n",
              "             260.7291 ,    260.73346],\n",
              "         ...,\n",
              "         [   260.9615 ,    261.00528,    261.05026, ...,    260.70172,\n",
              "             260.6904 ,    260.68427],\n",
              "         [   260.946  ,    260.99545,    261.0459 , ...,    260.6941 ,\n",
              "             260.68857,    260.68292],\n",
              "         [   260.9357 ,    260.98553,    261.0311 , ...,    260.6909 ,\n",
              "             260.68594,    260.6808 ]],\n",
              "\n",
              "        [[   854.88794,    854.8933 ,    854.9095 , ...,    854.0939 ,\n",
              "             854.118  ,    854.1317 ],\n",
              "         [   854.8664 ,    854.874  ,    854.8824 , ...,    854.142  ,\n",
              "             854.1455 ,    854.15967],\n",
              "         [   854.8394 ,    854.85504,    854.8499 , ...,    854.1653 ,\n",
              "             854.19006,    854.2043 ],\n",
              "...\n",
              "         [185535.12   , 185536.28   , 185537.02   , ..., 185370.     ,\n",
              "          185370.48   , 185371.56   ],\n",
              "         [185534.62   , 185537.1    , 185538.22   , ..., 185370.06   ,\n",
              "          185370.48   , 185371.34   ],\n",
              "         [185534.03   , 185535.16   , 185535.88   , ..., 185370.3    ,\n",
              "          185370.64   , 185370.9    ]],\n",
              "\n",
              "        [[195639.86   , 195639.86   , 195639.92   , ..., 195491.52   ,\n",
              "          195490.98   , 195490.45   ],\n",
              "         [195638.55   , 195635.23   , 195635.64   , ..., 195491.64   ,\n",
              "          195491.1    , 195490.4    ],\n",
              "         [195637.14   , 195634.23   , 195634.58   , ..., 195491.58   ,\n",
              "          195490.92   , 195490.27   ],\n",
              "         ...,\n",
              "         [195526.02   , 195527.14   , 195527.86   , ..., 195396.02   ,\n",
              "          195396.34   , 195397.75   ],\n",
              "         [195526.52   , 195528.58   , 195529.22   , ..., 195396.3    ,\n",
              "          195396.56   , 195397.94   ],\n",
              "         [195526.86   , 195527.08   , 195527.08   , ..., 195398.38   ,\n",
              "          195398.25   , 195398.08   ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    units:    meter ** 2 / second ** 2"
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (Time: 9, bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[[   260.99747,    260.9929 ,    260.99884, ...,    260.7003 ,\n",
              "             260.70963,    260.71387],\n",
              "         [   260.99008,    260.9899 ,    260.9899 , ...,    260.71582,\n",
              "             260.71484,    260.7192 ],\n",
              "         [   260.97723,    260.98166,    260.97565, ...,    260.71945,\n",
              "             260.7291 ,    260.73346],\n",
              "         ...,\n",
              "         [   260.9615 ,    261.00528,    261.05026, ...,    260.70172,\n",
              "             260.6904 ,    260.68427],\n",
              "         [   260.946  ,    260.99545,    261.0459 , ...,    260.6941 ,\n",
              "             260.68857,    260.68292],\n",
              "         [   260.9357 ,    260.98553,    261.0311 , ...,    260.6909 ,\n",
              "             260.68594,    260.6808 ]],\n",
              "\n",
              "        [[   854.88794,    854.8933 ,    854.9095 , ...,    854.0939 ,\n",
              "             854.118  ,    854.1317 ],\n",
              "         [   854.8664 ,    854.874  ,    854.8824 , ...,    854.142  ,\n",
              "             854.1455 ,    854.15967],\n",
              "         [   854.8394 ,    854.85504,    854.8499 , ...,    854.1653 ,\n",
              "             854.19006,    854.2043 ],\n",
              "...\n",
              "         [185535.12   , 185536.28   , 185537.02   , ..., 185370.     ,\n",
              "          185370.48   , 185371.56   ],\n",
              "         [185534.62   , 185537.1    , 185538.22   , ..., 185370.06   ,\n",
              "          185370.48   , 185371.34   ],\n",
              "         [185534.03   , 185535.16   , 185535.88   , ..., 185370.3    ,\n",
              "          185370.64   , 185370.9    ]],\n",
              "\n",
              "        [[195639.86   , 195639.86   , 195639.92   , ..., 195491.52   ,\n",
              "          195490.98   , 195490.45   ],\n",
              "         [195638.55   , 195635.23   , 195635.64   , ..., 195491.64   ,\n",
              "          195491.1    , 195490.4    ],\n",
              "         [195637.14   , 195634.23   , 195634.58   , ..., 195491.58   ,\n",
              "          195490.92   , 195490.27   ],\n",
              "         ...,\n",
              "         [195526.02   , 195527.14   , 195527.86   , ..., 195396.02   ,\n",
              "          195396.34   , 195397.75   ],\n",
              "         [195526.52   , 195528.58   , 195529.22   , ..., 195396.3    ,\n",
              "          195396.56   , 195397.94   ],\n",
              "         [195526.86   , 195527.08   , 195527.08   , ..., 195398.38   ,\n",
              "          195398.25   , 195398.08   ]]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    units:    meter ** 2 / second ** 2</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-a07299ea-ac40-42e5-8f46-696d13a2a584' class='xr-array-in' type='checkbox' checked><label for='section-a07299ea-ac40-42e5-8f46-696d13a2a584' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>261.0 261.0 261.0 261.0 ... 1.954e+05 1.954e+05 1.954e+05 1.954e+05</span></div><div class='xr-array-data'><pre>array([[[[   260.99747,    260.9929 ,    260.99884, ...,    260.7003 ,\n",
              "             260.70963,    260.71387],\n",
              "         [   260.99008,    260.9899 ,    260.9899 , ...,    260.71582,\n",
              "             260.71484,    260.7192 ],\n",
              "         [   260.97723,    260.98166,    260.97565, ...,    260.71945,\n",
              "             260.7291 ,    260.73346],\n",
              "         ...,\n",
              "         [   260.9615 ,    261.00528,    261.05026, ...,    260.70172,\n",
              "             260.6904 ,    260.68427],\n",
              "         [   260.946  ,    260.99545,    261.0459 , ...,    260.6941 ,\n",
              "             260.68857,    260.68292],\n",
              "         [   260.9357 ,    260.98553,    261.0311 , ...,    260.6909 ,\n",
              "             260.68594,    260.6808 ]],\n",
              "\n",
              "        [[   854.88794,    854.8933 ,    854.9095 , ...,    854.0939 ,\n",
              "             854.118  ,    854.1317 ],\n",
              "         [   854.8664 ,    854.874  ,    854.8824 , ...,    854.142  ,\n",
              "             854.1455 ,    854.15967],\n",
              "         [   854.8394 ,    854.85504,    854.8499 , ...,    854.1653 ,\n",
              "             854.19006,    854.2043 ],\n",
              "...\n",
              "         [185535.12   , 185536.28   , 185537.02   , ..., 185370.     ,\n",
              "          185370.48   , 185371.56   ],\n",
              "         [185534.62   , 185537.1    , 185538.22   , ..., 185370.06   ,\n",
              "          185370.48   , 185371.34   ],\n",
              "         [185534.03   , 185535.16   , 185535.88   , ..., 185370.3    ,\n",
              "          185370.64   , 185370.9    ]],\n",
              "\n",
              "        [[195639.86   , 195639.86   , 195639.92   , ..., 195491.52   ,\n",
              "          195490.98   , 195490.45   ],\n",
              "         [195638.55   , 195635.23   , 195635.64   , ..., 195491.64   ,\n",
              "          195491.1    , 195490.4    ],\n",
              "         [195637.14   , 195634.23   , 195634.58   , ..., 195491.58   ,\n",
              "          195490.92   , 195490.27   ],\n",
              "         ...,\n",
              "         [195526.02   , 195527.14   , 195527.86   , ..., 195396.02   ,\n",
              "          195396.34   , 195397.75   ],\n",
              "         [195526.52   , 195528.58   , 195529.22   , ..., 195396.3    ,\n",
              "          195396.56   , 195397.94   ],\n",
              "         [195526.86   , 195527.08   , 195527.08   , ..., 195398.38   ,\n",
              "          195398.25   , 195398.08   ]]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-f29b992f-49c5-4307-b5b1-531e614416f0' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f29b992f-49c5-4307-b5b1-531e614416f0' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-7756ae0f-03b5-474e-b5ac-5dd8edef696b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7756ae0f-03b5-474e-b5ac-5dd8edef696b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fd40042b-6c69-4d51-a864-fa4e0b2b1c93' class='xr-var-data-in' type='checkbox'><label for='data-fd40042b-6c69-4d51-a864-fa4e0b2b1c93' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-ef84f0d4-273a-4af9-9449-37214e1b636a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ef84f0d4-273a-4af9-9449-37214e1b636a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b2e7d398-7765-40ff-9914-1e32bf22da62' class='xr-var-data-in' type='checkbox'><label for='data-b2e7d398-7765-40ff-9914-1e32bf22da62' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-fbbf1265-2998-4632-b758-e894e3d28274' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-fbbf1265-2998-4632-b758-e894e3d28274' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bc963098-d8ee-4257-837a-d1e045271702' class='xr-var-data-in' type='checkbox'><label for='data-bc963098-d8ee-4257-837a-d1e045271702' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23 ... 2019-02-24</div><input id='attrs-4a774d7d-cbdb-4c0d-8855-b68690bcaa5a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4a774d7d-cbdb-4c0d-8855-b68690bcaa5a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bf5f312d-7964-40e1-af8b-cc23eaa1363e' class='xr-var-data-in' type='checkbox'><label for='data-bf5f312d-7964-40e1-af8b-cc23eaa1363e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-9ea92040-8f93-4029-9711-4b2234fec969' class='xr-section-summary-in' type='checkbox'  checked><label for='section-9ea92040-8f93-4029-9711-4b2234fec969' class='xr-section-summary' >Attributes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>meter ** 2 / second ** 2</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "#Kalkulasi dengan metpy untuk mendapatkan variabel baru\n",
        "\"\"\"Dokumentasi:\n",
        "    https://unidata.github.io/MetPy/latest/api/generated/metpy.calc.html\n",
        "\"\"\"\n",
        "\n",
        "#Perihitungn ketinggian geopotensial\n",
        "metpy.calc.height_to_geopotential(height).metpy.dequantify()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P0pC-ELgiTii"
      },
      "source": [
        "## Indexing dan Konversi Waktu dari UTC ke WIB\n",
        "Indexing waktu:\n",
        "https://xarray.pydata.org/en/stable/user-guide/time-series.html\n",
        "\n",
        "list timezone:\n",
        "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "id": "28l5kLI6iTii",
        "outputId": "59c3da98-bea0-40bc-d1c7-40833b1e0c17"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'Time' (Time: 9)>\n",
              "array(['2019-02-23T07:00:00.000000000', '2019-02-23T10:00:00.000000000',\n",
              "       '2019-02-23T13:00:00.000000000', '2019-02-23T16:00:00.000000000',\n",
              "       '2019-02-23T19:00:00.000000000', '2019-02-23T22:00:00.000000000',\n",
              "       '2019-02-24T01:00:00.000000000', '2019-02-24T04:00:00.000000000',\n",
              "       '2019-02-24T07:00:00.000000000'], dtype='datetime64[ns]')\n",
              "Coordinates:\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23T07:00:00 ... 2019-02-24T07:00:00"
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;Time&#x27; (Time: 9)&gt;\n",
              "array([&#x27;2019-02-23T07:00:00.000000000&#x27;, &#x27;2019-02-23T10:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T13:00:00.000000000&#x27;, &#x27;2019-02-23T16:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T19:00:00.000000000&#x27;, &#x27;2019-02-23T22:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T01:00:00.000000000&#x27;, &#x27;2019-02-24T04:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T07:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)\n",
              "Coordinates:\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23T07:00:00 ... 2019-02-24T07:00:00</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'Time'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-9db71cc7-3401-40a1-94d0-955f7b853fe1' class='xr-array-in' type='checkbox' checked><label for='section-9db71cc7-3401-40a1-94d0-955f7b853fe1' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>2019-02-23T07:00:00 2019-02-23T10:00:00 ... 2019-02-24T07:00:00</span></div><div class='xr-array-data'><pre>array([&#x27;2019-02-23T07:00:00.000000000&#x27;, &#x27;2019-02-23T10:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T13:00:00.000000000&#x27;, &#x27;2019-02-23T16:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T19:00:00.000000000&#x27;, &#x27;2019-02-23T22:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T01:00:00.000000000&#x27;, &#x27;2019-02-24T04:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T07:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></div></li><li class='xr-section-item'><input id='section-d57d7c7f-fe98-43eb-bc11-a2a78197ac92' class='xr-section-summary-in' type='checkbox'  checked><label for='section-d57d7c7f-fe98-43eb-bc11-a2a78197ac92' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-5c98ff82-a5be-4731-8cb3-4235a1fc6588' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5c98ff82-a5be-4731-8cb3-4235a1fc6588' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a63800cd-e1fe-4d96-a087-8293b75c96fc' class='xr-var-data-in' type='checkbox'><label for='data-a63800cd-e1fe-4d96-a087-8293b75c96fc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23T07:00:00 ... 2019-02-...</div><input id='attrs-e9ced7f3-c6f2-4eb1-b2a9-a6c17c2360b6' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e9ced7f3-c6f2-4eb1-b2a9-a6c17c2360b6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b7b28bed-59ca-4478-8027-9c048e103647' class='xr-var-data-in' type='checkbox'><label for='data-b7b28bed-59ca-4478-8027-9c048e103647' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T07:00:00.000000000&#x27;, &#x27;2019-02-23T10:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T13:00:00.000000000&#x27;, &#x27;2019-02-23T16:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T19:00:00.000000000&#x27;, &#x27;2019-02-23T22:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T01:00:00.000000000&#x27;, &#x27;2019-02-24T04:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T07:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-746d6575-b40a-46ac-b9eb-4607d50f2720' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-746d6575-b40a-46ac-b9eb-4607d50f2720' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "#Waktunya ditambah 7 jam\n",
        "temp['Time'] = temp['Time'] + np.timedelta64(7, 'h')\n",
        "temp['Time']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDtfzrt3iTij"
      },
      "source": [
        "# Indexing or Selecting data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "viXsry4MiTij"
      },
      "outputs": [],
      "source": [
        "\"\"\"Notes: beberapa variabel tidak ada koordinat tertentu meskipun ada dimensinya\n",
        "    contohnya variabel A punya dimensi (Time,bottom_top,south_north,west_east)\n",
        "    tapi hanya mempunyai koordinat longitude, latitude, dan time, tidak ada ketinggian (untuk bottom_top)\n",
        "\"\"\"\n",
        "\n",
        "#Dengan atribute sel (hanya bisa indexing coordinates) -> memilih berdasarkan nilainya\n",
        "temp_slice = temp.sel(Time ='2019-02-24T07:00:00.000000000')\n",
        "\n",
        "#Dengan atribute isel (hanya bisa indexing coordinates) -> memilih berdasarkan indeksnya\n",
        "# temp_slice = temp.isel(Time=0)\n",
        "\n",
        "#Dengan indexing biasa (dengan nilai indeks)\n",
        "# temp_slice = temp[0,:,:,:] #sesuai urutan dimensi (Time,bottom_top,south_north,west_east)\n",
        "\n",
        "#Memanggil dimensi / koordinat tertentu\n",
        "# temp['bottom_top'] #cara 1\n",
        "# temp.bottom_top #cara 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xEuBwPysiTik",
        "outputId": "a6243f72-54df-4de3-c120-1b8ea52334c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'temp' (bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    float32 1.44e+03\n",
              "    Time     datetime64[ns] 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;temp&#x27; (bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    float32 1.44e+03\n",
              "    Time     datetime64[ns] 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'temp'</div><ul class='xr-dim-list'><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-929cbb5c-5e05-4a74-95d7-38282d82a7f3' class='xr-array-in' type='checkbox' checked><label for='section-929cbb5c-5e05-4a74-95d7-38282d82a7f3' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>301.2 301.2 301.2 301.1 301.1 301.1 ... 205.9 205.8 205.8 205.7 205.7</span></div><div class='xr-array-data'><pre>array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-33fc616e-5ec7-4b30-bfe9-6403587c651f' class='xr-section-summary-in' type='checkbox'  checked><label for='section-33fc616e-5ec7-4b30-bfe9-6403587c651f' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-e9099133-9b50-47ae-9f96-b33e66c513f2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e9099133-9b50-47ae-9f96-b33e66c513f2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-47efc6e8-c9f6-475c-b5ff-5c1a55bf0394' class='xr-var-data-in' type='checkbox'><label for='data-47efc6e8-c9f6-475c-b5ff-5c1a55bf0394' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-d92b0bd5-aadc-48a2-9f93-0b0f91b882ee' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d92b0bd5-aadc-48a2-9f93-0b0f91b882ee' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-686efd99-abb9-420f-a5e5-c108c62833ac' class='xr-var-data-in' type='checkbox'><label for='data-686efd99-abb9-420f-a5e5-c108c62833ac' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>1.44e+03</div><input id='attrs-7afb67be-d65a-40e9-b87d-8c5c349ea23e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7afb67be-d65a-40e9-b87d-8c5c349ea23e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d75ba428-5cbc-4218-a070-ffddd7b256cc' class='xr-var-data-in' type='checkbox'><label for='data-d75ba428-5cbc-4218-a070-ffddd7b256cc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1440., dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Time</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-24T07:00:00</div><input id='attrs-97ec9cd3-3e4a-4100-8d15-0048c131ac37' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-97ec9cd3-3e4a-4100-8d15-0048c131ac37' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7070ad1f-e99d-41b2-a8b5-2b3cb84ccca6' class='xr-var-data-in' type='checkbox'><label for='data-7070ad1f-e99d-41b2-a8b5-2b3cb84ccca6' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(&#x27;2019-02-24T07:00:00.000000000&#x27;, dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-b3a329fe-466d-49cf-99d3-003fca7064d5' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b3a329fe-466d-49cf-99d3-003fca7064d5' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XYZ</dd><dt><span>description :</span></dt><dd>temperature</dd><dt><span>units :</span></dt><dd>K</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "temp_slice"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IHD53PPAiTik"
      },
      "source": [
        "# Menggambar Peta"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hRqyrOxRiTik",
        "outputId": "8ca26fba-a185-42d3-9cbe-3247f9a3f098"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'temp' (bottom_top: 32, south_north: 195, west_east: 219)>\n",
              "array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    float32 1.44e+03\n",
              "    Time     datetime64[ns] 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;temp&#x27; (bottom_top: 32, south_north: 195, west_east: 219)&gt;\n",
              "array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    float32 1.44e+03\n",
              "    Time     datetime64[ns] 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: bottom_top, south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XYZ\n",
              "    description:  temperature\n",
              "    units:        K\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'temp'</div><ul class='xr-dim-list'><li><span>bottom_top</span>: 32</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-ab164f01-c85e-4eea-87b0-d5a19df43f92' class='xr-array-in' type='checkbox' checked><label for='section-ab164f01-c85e-4eea-87b0-d5a19df43f92' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>301.2 301.2 301.2 301.1 301.1 301.1 ... 205.9 205.8 205.8 205.7 205.7</span></div><div class='xr-array-data'><pre>array([[[301.1659 , 301.16507, 301.15213, ..., 301.20932, 301.19635,\n",
              "         301.16806],\n",
              "        [301.17142, 301.16492, 301.1438 , ..., 301.1892 , 301.17944,\n",
              "         301.15768],\n",
              "        [301.16068, 301.1534 , 301.13824, ..., 301.1882 , 301.1793 ,\n",
              "         301.15768],\n",
              "        ...,\n",
              "        [300.67502, 300.7566 , 300.83588, ..., 301.69754, 301.69562,\n",
              "         301.6961 ],\n",
              "        [300.66275, 300.74805, 300.8272 , ..., 301.69455, 301.69418,\n",
              "         301.69177],\n",
              "        [300.65472, 300.74295, 300.82147, ..., 301.69525, 301.69174,\n",
              "         301.69357]],\n",
              "\n",
              "       [[300.54547, 300.5441 , 300.52948, ..., 300.60434, 300.5955 ,\n",
              "         300.5642 ],\n",
              "        [300.55017, 300.54285, 300.5209 , ..., 300.58783, 300.58072,\n",
              "         300.55643],\n",
              "        [300.53113, 300.53528, 300.51627, ..., 300.5869 , 300.57913,\n",
              "         300.55643],\n",
              "...\n",
              "        [196.50247, 196.49225, 196.49442, ..., 195.0301 , 195.07976,\n",
              "         195.13304],\n",
              "        [196.57784, 196.58853, 196.58014, ..., 195.08727, 195.1357 ,\n",
              "         195.18985],\n",
              "        [196.63147, 196.6334 , 196.61671, ..., 195.16864, 195.2077 ,\n",
              "         195.24368]],\n",
              "\n",
              "       [[203.3724 , 203.36035, 203.34673, ..., 203.08806, 203.11339,\n",
              "         203.13927],\n",
              "        [203.34805, 203.3148 , 203.29628, ..., 203.10255, 203.12885,\n",
              "         203.15692],\n",
              "        [203.31062, 203.27141, 203.24794, ..., 203.12909, 203.15233,\n",
              "         203.17711],\n",
              "        ...,\n",
              "        [202.96873, 202.9833 , 202.98306, ..., 205.86061, 205.8035 ,\n",
              "         205.75624],\n",
              "        [202.93497, 202.91281, 202.9032 , ..., 205.81339, 205.75818,\n",
              "         205.71774],\n",
              "        [202.93893, 202.91328, 202.91328, ..., 205.79582, 205.74117,\n",
              "         205.68997]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-f20d857b-98d6-405c-a63b-a38005ad1182' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f20d857b-98d6-405c-a63b-a38005ad1182' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-3f063cb0-710b-428a-be90-6bd532608a4a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3f063cb0-710b-428a-be90-6bd532608a4a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-aaff31eb-d38f-496c-80ce-9ce733ababce' class='xr-var-data-in' type='checkbox'><label for='data-aaff31eb-d38f-496c-80ce-9ce733ababce' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-7a81b460-3822-4bd8-ab6e-8e189debe090' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7a81b460-3822-4bd8-ab6e-8e189debe090' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-041dd076-57f0-47d1-9ab9-24e3b39f67e5' class='xr-var-data-in' type='checkbox'><label for='data-041dd076-57f0-47d1-9ab9-24e3b39f67e5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>1.44e+03</div><input id='attrs-c700c484-77d7-4a09-9b7c-1d148a595607' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c700c484-77d7-4a09-9b7c-1d148a595607' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3fdc0fed-6202-45d0-8c03-63978bbd469e' class='xr-var-data-in' type='checkbox'><label for='data-3fdc0fed-6202-45d0-8c03-63978bbd469e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1440., dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Time</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-24T07:00:00</div><input id='attrs-30502c88-cf72-46fd-9d5f-8c79ae9fab8d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-30502c88-cf72-46fd-9d5f-8c79ae9fab8d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-22bffc38-4b30-4b15-861a-e63a5cc590cd' class='xr-var-data-in' type='checkbox'><label for='data-22bffc38-4b30-4b15-861a-e63a5cc590cd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(&#x27;2019-02-24T07:00:00.000000000&#x27;, dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-bcf10588-69f7-4f20-92eb-860ec671c736' class='xr-section-summary-in' type='checkbox'  checked><label for='section-bcf10588-69f7-4f20-92eb-860ec671c736' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XYZ</dd><dt><span>description :</span></dt><dd>temperature</dd><dt><span>units :</span></dt><dd>K</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ],
      "source": [
        "temp_slice"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0bOSkxTTiTil"
      },
      "source": [
        "temp_slice masih memiliki 3 dimensi (z,x,y) ketika di plot 2d maka harus indexing di salah satu level z"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NczoD6hzOqfB"
      },
      "outputs": [],
      "source": [
        "import cartopy.crs as crs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "grCRD1TXOxg8"
      },
      "outputs": [],
      "source": [
        "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xTtBmDobO4gX"
      },
      "outputs": [],
      "source": [
        "import matplotlib\n",
        "from matplotlib.cm import get_cmap\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "EFEiRu4iQedE",
        "outputId": "02fa1003-cbe0-4190-a8ca-07854a9fd7e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing installation: matplotlib 3.1.3\n",
            "Uninstalling matplotlib-3.1.3:\n",
            "  Would remove:\n",
            "    /usr/local/lib/python3.7/dist-packages/matplotlib-3.1.3-py3.7-nspkg.pth\n",
            "    /usr/local/lib/python3.7/dist-packages/matplotlib-3.1.3.dist-info/*\n",
            "    /usr/local/lib/python3.7/dist-packages/matplotlib/*\n",
            "    /usr/local/lib/python3.7/dist-packages/mpl_toolkits/axes_grid/*\n",
            "    /usr/local/lib/python3.7/dist-packages/mpl_toolkits/axes_grid1/*\n",
            "    /usr/local/lib/python3.7/dist-packages/mpl_toolkits/axisartist/*\n",
            "    /usr/local/lib/python3.7/dist-packages/mpl_toolkits/mplot3d/*\n",
            "    /usr/local/lib/python3.7/dist-packages/mpl_toolkits/tests/*\n",
            "    /usr/local/lib/python3.7/dist-packages/pylab.py\n",
            "Proceed (y/n)? y\n",
            "  Successfully uninstalled matplotlib-3.1.3\n",
            "Collecting matplotlib==3.1.3\n",
            "  Using cached matplotlib-3.1.3-cp37-cp37m-manylinux1_x86_64.whl (13.1 MB)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib==3.1.3) (0.11.0)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib==3.1.3) (1.21.5)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib==3.1.3) (2.8.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib==3.1.3) (3.0.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib==3.1.3) (1.4.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib==3.1.3) (3.10.0.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib==3.1.3) (1.15.0)\n",
            "Installing collected packages: matplotlib\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "metpy 1.2.0 requires matplotlib>=3.3.0, but you have matplotlib 3.1.3 which is incompatible.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Successfully installed matplotlib-3.1.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "matplotlib",
                  "mpl_toolkits"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!python -m pip uninstall matplotlib\n",
        "!pip install matplotlib==3.1.3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "id": "d01gfdkuiTil",
        "outputId": "97bd76c3-96ab-4b63-8c62-e50521c51451"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:228: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(multi_line_string) > 1:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:280: ShapelyDeprecationWarning: Iteration over multi-part geometries is deprecated and will be removed in Shapely 2.0. Use the `geoms` property to access the constituent parts of a multi-part geometry.\n",
            "  for line in multi_line_string:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:347: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(p_mline) > 0:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/mpl/gridliner.py:336: UserWarning: The .xlabels_bottom attribute is deprecated. Please use .bottom_labels to toggle visibility instead.\n",
            "  warnings.warn('The .xlabels_bottom attribute is deprecated. Please '\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/mpl/gridliner.py:348: UserWarning: The .ylabels_left attribute is deprecated. Please use .left_labels to toggle visibility instead.\n",
            "  warnings.warn('The .ylabels_left attribute is deprecated. Please '\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Temperatur pada Level 2m (K)\\n24 February 2019, 07:00:00 WIB')"
            ]
          },
          "metadata": {},
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Create a figure\n",
        "fig = plt.figure(figsize=(12,6))\n",
        "# Set the GeoAxes to the projection used by WRF\n",
        "ax = plt.axes(projection=crs.Mercator())\n",
        "# Add coastlines\n",
        "ax.coastlines('10m', linewidth=2)\n",
        "\n",
        "#Deklarasi variabel plot\n",
        "x = wrf.to_np(temp_slice['XLONG'])\n",
        "y = wrf.to_np(temp_slice['XLAT'])\n",
        "variable = wrf.to_np(temp_slice[0,:,:]) #dimensi harus jadi 2d (x,y) tidak ada z atau time\n",
        "waktu = pd.to_datetime(temp_slice['Time'].values).strftime('%d %B %Y, %H:%M:%S')\n",
        "#Mau mengubah format penulisan waktu?? -> https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\n",
        "\n",
        "# Plot contours\n",
        "lev = np.arange(285,320,5)\n",
        "map = plt.contourf(x,                    #x coordinate\n",
        "             y,                    #y coordinate\n",
        "             variable,                  #variable to plot\n",
        "             transform=crs.PlateCarree(),\n",
        "             cmap=get_cmap(\"coolwarm\"), #set cmap, reversed() to reversed color order\n",
        "             levels=lev,                         #set level\n",
        "             extend='both')                      #extend color bar\n",
        "\n",
        "# Add a color bar\n",
        "cbar = plt.colorbar(ax=ax, shrink=.8)\n",
        "cbar.set_label(temp_slice.units)\n",
        "\n",
        "# Add the gridlines\n",
        "gl=ax.gridlines(color='black')\n",
        "gl.xlabels_bottom, gl.ylabels_left = True, True\n",
        "gl.xformatter = LONGITUDE_FORMATTER\n",
        "gl.yformatter = LATITUDE_FORMATTER\n",
        "gl.xlabel_style = {'size': 10}\n",
        "gl.ylabel_style = {'size': 10}\n",
        "\n",
        "#add title\n",
        "plt.title('Temperatur pada Level 2m ('+temp_slice.units+')'+'\\n'+str(waktu) + ' WIB', fontsize=15)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBYPEoQRjU3a"
      },
      "source": [
        "***CURAH HUJAN***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hxItTEp_eE2D",
        "outputId": "d6b5323c-9481-4b0d-be0c-ad19118fc858"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ACGRDFLX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACGRDFLX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED GROUND HEAT FLUX\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACHFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACHFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWARD HEAT FLUX AT THE SURFACE\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLHF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLHF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWARD LATENT HEAT FLUX AT THE SURFACE\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACLWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACLWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSNOM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSNOM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED MELTED SNOW\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ACSWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ACSWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED UPWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: J m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ALBBCK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ALBBCK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: BACKGROUND ALBEDO\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ALBEDO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ALBEDO(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ALBEDO\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C1F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C1F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c1f = d bf / d eta, using znu\n",
              "     units: Dimensionless\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C1H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C1H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c1h = d bf / d eta, using znw\n",
              "     units: Dimensionless\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C2F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C2F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c2f = (1-c1f)*(p0-pt)\n",
              "     units: Pa\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C2H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C2H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c2h = (1-c1h)*(p0-pt)\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C3F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C3F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c3f = bf\n",
              "     units: Dimensionless\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C3H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C3H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c3h = bh\n",
              "     units: Dimensionless\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C4F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C4F(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: full levels, c4f = (eta-bf)*(p0-pt)+pt, using znw\n",
              "     units: Pa\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'C4H': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 C4H(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: half levels, c4h = (eta-bh)*(p0-pt)+pt, using znu\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CANWAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CANWAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: CANOPY WATER\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF1(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF2(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CF3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CF3(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: 2nd order extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CFN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CFN(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CFN1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CFN1(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: extrapolation constant\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CLAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CLAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COMPUTATIONAL GRID LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CLDFRA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CLDFRA(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: CLOUD FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CON': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CON(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC CONVEXITY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'COSALPHA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 COSALPHA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Local cosine of map rotation\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'COSZEN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 COSZEN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COS of SOLAR ZENITH ANGLE\n",
              "     units: dimensionless\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'CWM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 CWM(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Total condensate mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DN(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: d(eta) values between half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DNW(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: d(eta) values between full (w) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DTAUX3D': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DTAUX3D(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: LOCAL U GWDO STRESS\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DTAUY3D': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DTAUY3D(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: LOCAL V GWDO STRESS\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DUSFCG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DUSFCG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COLUMN-INTEGRATED U GWDO STRESS\n",
              "     units: Pa m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DVSFCG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DVSFCG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: COLUMN-INTEGRATED V GWDO STRESS\n",
              "     units: Pa m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'DZS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 DZS(Time, soil_layers_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: THICKNESSES OF SOIL LAYERS\n",
              "     units: m\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'E': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 E(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Coriolis cosine latitude term\n",
              "     units: s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'EMISS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 EMISS(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE EMISSIVITY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Coriolis sine latitude term\n",
              "     units: s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'FNM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 FNM(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: upper weight for vertical stretching\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'FNP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 FNP(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: lower weight for vertical stretching\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_ICE_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_ICE_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: FRACTION OF ICE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_RAIN_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_RAIN_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: FRACTION OF RAIN\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'F_RIMEF_PHY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 F_RIMEF_PHY(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: MASS RATIO OF RIMED ICE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GLW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GLW(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: DOWNWARD LONG WAVE FLUX AT GROUND SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GRAUPELNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GRAUPELNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE GRAUPEL\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'GRDFLX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 GRDFLX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: GROUND HEAT FLUX\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HAILNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HAILNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE HAIL\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UPWARD HEAT FLUX AT THE SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface sensible heat flux\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HFX_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HFX_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface sensible heat flux tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'HGT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 HGT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Terrain Height\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ISEEDARRAY_SPP_CONV': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_CONV(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT2\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARRAY_SPP_LSM': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_LSM(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT4\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARRAY_SPP_PBL': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARRAY_SPP_PBL(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT3\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_RAND_PERTURB': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_RAND_PERTURB(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, RAND_PERT\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_SKEBS': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_SKEBS(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, SKEBS\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISEEDARR_SPPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISEEDARR_SPPT(Time, bottom_top)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: Z  \n",
              "     description: Array to hold seed for restart, SPPT\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ISLTYP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ISLTYP(Time, south_north, west_east)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: XY \n",
              "     description: DOMINANT SOIL CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'ITIMESTEP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 ITIMESTEP(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: \n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'IVGTYP': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 IVGTYP(Time, south_north, west_east)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: XY \n",
              "     description: DOMINANT VEGETATION CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'LAI': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LAI(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LEAF AREA INDEX\n",
              "     units: m-2/m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LAKEMASK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LAKEMASK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAKE MASK (1 FOR LAKE, 0 FOR NON-LAKE)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LANDMASK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LANDMASK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND MASK (1 FOR LAND, 0 FOR WATER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATENT HEAT FLUX AT THE SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface latent heat flux\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LH_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LH_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface latent heat flux tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LU_INDEX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LU_INDEX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND USE CATEGORY\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY LONGWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'LWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 LWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY LONGWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_M': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_M(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_MX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_MX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid, x direction\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_MY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_MY(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on mass grid, y direction\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_UX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_UX(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid, x direction\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_UY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_UY(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on u-grid, y direction\n",
              "     units: \n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_VX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_VX(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid, x direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAPFAC_VY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAPFAC_VY(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Map scale factor on v-grid, y direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAX_MSTFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAX_MSTFX(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: Max map factor in domain\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MAX_MSTFY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MAX_MSTFY(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: Max map factor in domain\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MF_VX_INV': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MF_VX_INV(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Inverse map scale factor on v-grid, x direction\n",
              "     units: \n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MU': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MU(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: perturbation dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'MUB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 MUB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: base state dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'NEST_POS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 NEST_POS(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: -\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'NOAHRES': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 NOAHRES(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: RESIDUAL OF THE NOAH SURFACE ENERGY BUDGET\n",
              "     units: W m{-2}\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA1(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA3(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OA4': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OA4(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL1': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL1(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL3': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL3(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OL4': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OL4(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC DIRECTION ASYMMETRY FUNCTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'OLR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 OLR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: TOA OUTGOING LONG WAVE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation pressure\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P00': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P00(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE PRESURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PB(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: BASE STATE PRESSURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PBLH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PBLH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: PBL HEIGHT\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: perturbation dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PCB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PCB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: base state dry air mass in column\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PH(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation geopotential\n",
              "     units: m2 s-2\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PHB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PHB(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: base-state geopotential\n",
              "     units: m2 s-2\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'PSFC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 PSFC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SFC PRESSURE\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_HYD': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_HYD(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: hydrostatic pressure\n",
              "     units: Pa\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_STRAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_STRAT(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE PRESSURE AT BOTTOM OF STRATOSPHERE\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'P_TOP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 P_TOP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: PRESSURE TOP OF THE MODEL\n",
              "     units: Pa\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'Q2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 Q2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: QV at 2 M\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QCLOUD': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QCLOUD(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Cloud water mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QFX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QFX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UPWARD MOISTURE FLUX AT THE SURFACE\n",
              "     units: kg m-2 s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QICE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QICE(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Ice mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QRAIN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QRAIN(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Rain water mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'QVAPOR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 QVAPOR(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: Water vapor mixing ratio\n",
              "     units: kg kg-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL CUMULUS PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RAINSH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RAINSH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED SHALLOW CUMULUS PRECIPITATION\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDN(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: inverse d(eta) values between half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDNW(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: inverse d(eta) values between full (w) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDX(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: INVERSE X GRID LENGTH\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RDY': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RDY(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: INVERSE Y GRID LENGTH\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'RESM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 RESM(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: TIME WEIGHT CONSTANT FOR SMALL STEPS\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SAVE_TOPO_FROM_REAL': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 SAVE_TOPO_FROM_REAL(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: 1=original topo from real/0=topo modified by WRF\n",
              "     units: flag\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'SEAICE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SEAICE(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA ICE FLAG\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SFROFF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SFROFF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE RUNOFF\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SH2O': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SH2O(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL LIQUID WATER\n",
              "     units: m3 m-3\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SHDMAX': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SHDMAX(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MAX VEG FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SHDMIN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SHDMIN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MIN VEG FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SINALPHA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SINALPHA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: Local sine of map rotation\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SMCREL': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SMCREL(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: RELATIVE SOIL MOISTURE\n",
              "     units: \n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SMOIS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SMOIS(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL MOISTURE\n",
              "     units: m3 m-3\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOALB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOALB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ANNUAL MAX SNOW ALBEDO IN FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOW(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SNOW WATER EQUIVALENT\n",
              "     units: kg m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: FLAG INDICATING SNOW COVERAGE (1 FOR SNOW COVER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWH': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWH(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: PHYSICAL SNOW DEPTH\n",
              "     units: m\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SNOWNC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SNOWNC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: ACCUMULATED TOTAL GRID SCALE SNOW AND ICE\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: fraction of frozen precipitation\n",
              "     units: -\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SST': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SST(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA SURFACE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SSTSK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SSTSK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SKIN SEA SURFACE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SST_INPUT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SST_INPUT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA SURFACE TEMPERATURE FROM WRFLOWINPUT FILE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDNTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDNTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS DOWNWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWDOWN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWDOWN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: DOWNWARD SHORT WAVE FLUX AT GROUND SURFACE\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWNORM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWNORM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: NORMAL SHORT WAVE FLUX AT GROUND SURFACE (SLOPE-DEPENDENT)\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPB(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPBC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPBC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY SHORTWAVE FLUX AT BOTTOM\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'SWUPTC': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 SWUPTC(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: INSTANTANEOUS UPWELLING CLEAR SKY SHORTWAVE FLUX AT TOP\n",
              "     units: W m-2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: perturbation potential temperature theta-t0\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T00': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T00(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'T2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 T2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: TEMP at 2 M\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TH2': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TH2(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: POT TEMP at 2 M\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'THIS_IS_AN_IDEAL_RUN': <class 'netCDF4._netCDF4.Variable'>\n",
              " int32 THIS_IS_AN_IDEAL_RUN(Time)\n",
              "     FieldType: 106\n",
              "     MemoryOrder: 0  \n",
              "     description: T/F flag: this is an ARW ideal simulation\n",
              "     units: -\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of -2147483647 used,\n",
              " 'THM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 THM(Time, bottom_top, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: either 1) pert moist pot temp=(1+Rv/Rd Qv)*(theta)-T0, or 2) pert dry pot temp=t\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TISO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TISO(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: TEMP AT WHICH THE BASE T TURNS CONST\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TLP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TLP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE LAPSE RATE\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TLP_STRAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TLP_STRAT(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: BASE STATE LAPSE RATE (DT/D(LN(P)) IN STRATOSPHERE\n",
              "     units: K\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TMN': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TMN(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SOIL TEMPERATURE AT LOWER BOUNDARY\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SURFACE SKIN TEMPERATURE\n",
              "     units: K\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK_FORCE': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK_FORCE(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface skin temperature\n",
              "     units: W m-2\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSK_FORCE_TEND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSK_FORCE_TEND(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: SCM ideal surface skin temperature tendency\n",
              "     units: W m-2 s-1\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'TSLB': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 TSLB(Time, soil_layers_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: SOIL TEMPERATURE\n",
              "     units: K\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'Times': <class 'netCDF4._netCDF4.Variable'>\n",
              " |S1 Times(Time, DateStrLen)\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 19)\n",
              " filling on, default _FillValue of \u0000 used,\n",
              " 'U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 U(Time, bottom_top, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: x-wind component\n",
              "     units: m s-1\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'U10': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 U10(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: U at 10 M\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'UDROFF': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 UDROFF(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: UNDERGROUND RUNOFF\n",
              "     units: mm\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'UST': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 UST(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: U* IN SIMILARITY THEORY\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 V(Time, bottom_top, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: y-wind component\n",
              "     units: m s-1\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'V10': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 V10(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: V at 10 M\n",
              "     units: m s-1\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VAR': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VAR(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: OROGRAPHIC VARIANCE\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VAR_SSO': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VAR_SSO(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: variance of subgrid-scale orography\n",
              "     units: m2\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'VEGFRA': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 VEGFRA(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: VEGETATION FRACTION\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'W': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 W(Time, bottom_top_stag, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XYZ\n",
              "     description: z-wind component\n",
              "     units: m s-1\n",
              "     stagger: Z\n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XICEM': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XICEM(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: SEA ICE FLAG (PREVIOUS STEP)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAND': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAND(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LAND MASK (1 FOR LAND, 2 FOR WATER)\n",
              "     units: \n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT XTIME\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLAT_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLAT_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LATITUDE, SOUTH IS NEGATIVE\n",
              "     units: degree_north\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG(Time, south_north, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: \n",
              "     coordinates: XLONG XLAT\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG_U': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG_U(Time, south_north, west_east_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: X\n",
              "     coordinates: XLONG_U XLAT_U\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 195, 220)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XLONG_V': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XLONG_V(Time, south_north_stag, west_east)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: XY \n",
              "     description: LONGITUDE, WEST IS NEGATIVE\n",
              "     units: degree_east\n",
              "     stagger: Y\n",
              "     coordinates: XLONG_V XLAT_V\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 196, 219)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'XTIME': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 XTIME(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: minutes since 2019-02-23 00:00:00\n",
              "     units: minutes since 2019-02-23 00:00:00\n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZETATOP': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZETATOP(Time)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: 0  \n",
              "     description: ZETA AT MODEL TOP\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9,)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZNU': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZNU(Time, bottom_top)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: eta values on half (mass) levels\n",
              "     units: \n",
              "     stagger: \n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 32)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZNW': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZNW(Time, bottom_top_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: eta values on full (w) levels\n",
              "     units: \n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 33)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used,\n",
              " 'ZS': <class 'netCDF4._netCDF4.Variable'>\n",
              " float32 ZS(Time, soil_layers_stag)\n",
              "     FieldType: 104\n",
              "     MemoryOrder: Z  \n",
              "     description: DEPTHS OF CENTERS OF SOIL LAYERS\n",
              "     units: m\n",
              "     stagger: Z\n",
              " unlimited dimensions: Time\n",
              " current shape = (9, 4)\n",
              " filling on, default _FillValue of 9.969209968386869e+36 used}"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "# read data nc\n",
        "nc2 = Dataset('/content/drive/MyDrive/grup2mpcn/wrfout_d02_2019-02-23_00_00_00')\n",
        "#nc = Dataset('drive/MyDrive/data_wrf/wrfout_d01')\n",
        "nc2.variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        },
        "id": "iE9nVrtgjaT0",
        "outputId": "bfd31ae0-764e-4bc2-f1b2-ab50f06bd0b3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'times' (Time: 9)>\n",
              "array(['2019-02-23T00:00:00.000000000', '2019-02-23T03:00:00.000000000',\n",
              "       '2019-02-23T06:00:00.000000000', '2019-02-23T09:00:00.000000000',\n",
              "       '2019-02-23T12:00:00.000000000', '2019-02-23T15:00:00.000000000',\n",
              "       '2019-02-23T18:00:00.000000000', '2019-02-23T21:00:00.000000000',\n",
              "       '2019-02-24T00:00:00.000000000'], dtype='datetime64[ns]')\n",
              "Dimensions without coordinates: Time\n",
              "Attributes:\n",
              "    description:  model times [np.datetime64]"
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;times&#x27; (Time: 9)&gt;\n",
              "array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)\n",
              "Dimensions without coordinates: Time\n",
              "Attributes:\n",
              "    description:  model times [np.datetime64]</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'times'</div><ul class='xr-dim-list'><li><span>Time</span>: 9</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-9d6e9e1e-8fc9-4872-bde4-7214ac665b94' class='xr-array-in' type='checkbox' checked><label for='section-9d6e9e1e-8fc9-4872-bde4-7214ac665b94' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>2019-02-23 2019-02-23T03:00:00 ... 2019-02-23T21:00:00 2019-02-24</span></div><div class='xr-array-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></div></li><li class='xr-section-item'><input id='section-7072b5fc-a30f-4867-b074-93ba9d88472c' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-7072b5fc-a30f-4867-b074-93ba9d88472c' class='xr-section-summary'  title='Expand/collapse section'>Coordinates: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'></ul></div></li><li class='xr-section-item'><input id='section-52fd2b70-a075-4dee-8077-284171772617' class='xr-section-summary-in' type='checkbox'  checked><label for='section-52fd2b70-a075-4dee-8077-284171772617' class='xr-section-summary' >Attributes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>description :</span></dt><dd>model times [np.datetime64]</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "time = wrf.getvar(nc2,'Times',timeidx=wrf.ALL_TIMES)\n",
        "time"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "CtkAX9PUl1ZZ",
        "outputId": "e2b3e366-98a4-4e92-e403-6f8e7ce5fb3c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'RAINNC' (Time: 9, south_north: 195, west_east: 219)>\n",
              "array([[[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "...\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.40121978e-04, 1.09437387e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.36454852e-04, 1.15463416e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XY \n",
              "    description:  ACCUMULATED TOTAL GRID SCALE PRECIPITATION\n",
              "    units:        mm\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;RAINNC&#x27; (Time: 9, south_north: 195, west_east: 219)&gt;\n",
              "array([[[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "...\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.40121978e-04, 1.09437387e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.36454852e-04, 1.15463416e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23 2019-02-23T03:00:00 ... 2019-02-24\n",
              "Dimensions without coordinates: south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XY \n",
              "    description:  ACCUMULATED TOTAL GRID SCALE PRECIPITATION\n",
              "    units:        mm\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'RAINNC'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-79ef00f2-73b2-4bdd-a503-e8cc4cc61562' class='xr-array-in' type='checkbox' checked><label for='section-79ef00f2-73b2-4bdd-a503-e8cc4cc61562' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</span></div><div class='xr-array-data'><pre>array([[[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "...\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\n",
              "\n",
              "       [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.40121978e-04, 1.09437387e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 1.36454852e-04, 1.15463416e-04, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        ...,\n",
              "        [0.00000000e+00, 3.52472966e-07, 5.16212197e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 2.73174919e-07, 5.62245702e-07, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
              "        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
              "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-93f3084c-e045-4338-9f99-f09584a038c6' class='xr-section-summary-in' type='checkbox'  checked><label for='section-93f3084c-e045-4338-9f99-f09584a038c6' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-70cbf15a-5159-4ab4-a8cc-d413101664d1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-70cbf15a-5159-4ab4-a8cc-d413101664d1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c7e087f4-8fb5-41e8-a4d7-9a015d693afd' class='xr-var-data-in' type='checkbox'><label for='data-c7e087f4-8fb5-41e8-a4d7-9a015d693afd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-345fc87f-3449-47ba-92e8-627c4aa33a0d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-345fc87f-3449-47ba-92e8-627c4aa33a0d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3d267d87-34b9-49cb-a04c-8a5d901ad2dd' class='xr-var-data-in' type='checkbox'><label for='data-3d267d87-34b9-49cb-a04c-8a5d901ad2dd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-83cfe006-016d-4ab7-87f9-af3d35e4f4dd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-83cfe006-016d-4ab7-87f9-af3d35e4f4dd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-dcb6743f-cacf-40ca-86eb-260ffe0d6564' class='xr-var-data-in' type='checkbox'><label for='data-dcb6743f-cacf-40ca-86eb-260ffe0d6564' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23 ... 2019-02-24</div><input id='attrs-e19bef9c-c6f6-4ea8-aa5c-56850ef5a094' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e19bef9c-c6f6-4ea8-aa5c-56850ef5a094' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-648d468c-0abf-4522-99dc-951e5e74a221' class='xr-var-data-in' type='checkbox'><label for='data-648d468c-0abf-4522-99dc-951e5e74a221' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T00:00:00.000000000&#x27;, &#x27;2019-02-23T03:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T06:00:00.000000000&#x27;, &#x27;2019-02-23T09:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T12:00:00.000000000&#x27;, &#x27;2019-02-23T15:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T18:00:00.000000000&#x27;, &#x27;2019-02-23T21:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-caebd204-80da-4818-b483-f12d16f48e88' class='xr-section-summary-in' type='checkbox'  checked><label for='section-caebd204-80da-4818-b483-f12d16f48e88' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XY </dd><dt><span>description :</span></dt><dd>ACCUMULATED TOTAL GRID SCALE PRECIPITATION</dd><dt><span>units :</span></dt><dd>mm</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "rainc = wrf.getvar(nc2,'RAINNC',timeidx=wrf.ALL_TIMES)\n",
        "rainc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RZO9kBYbl_BF"
      },
      "outputs": [],
      "source": [
        "#Perhitungan Curah Hujan\n",
        "def curah_hujan(nc,jam): #jam = perbedaan waktu tiap timestep, nc = dataset wrf yang ingin dicari curah hujannya\n",
        "    time = wrf.getvar(nc2,'Times',timeidx=wrf.ALL_TIMES)\n",
        "    rainc = wrf.getvar(nc2,'RAINC',timeidx=wrf.ALL_TIMES)\n",
        "    rainsh = wrf.getvar(nc2,'RAINSH',timeidx=wrf.ALL_TIMES)\n",
        "    rainnc = wrf.getvar(nc2,'RAINNC',timeidx=wrf.ALL_TIMES)\n",
        "    prec = rainc.copy()\n",
        "    for idx,val in enumerate(time.values):\n",
        "        if idx == 0:\n",
        "            prec[idx] = 0\n",
        "        else:\n",
        "            prec[idx] = (rainc[idx] - rainc[idx-1] + rainsh[idx] - rainsh[idx-1] + rainnc[idx] - rainnc[idx-1]) / jam\n",
        "    prec.attrs['units'] = 'mm/h'\n",
        "    prec.attrs['description'] = 'Curah Hujan'\n",
        "    return prec"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FDYgs4i3mj_L",
        "outputId": "e1b6e08f-0bbd-4f35-dc2d-79dfffe8b2c9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<xarray.DataArray 'RAINC' (Time: 9, south_north: 195, west_east: 219)>\n",
              "array([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "...\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 5.4718661e-01, 5.6346536e-01],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1098266e+00, 2.2141995e+00, 1.7092756e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1420536e+00, 1.7756225e+00, 4.4582787e-01],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23T07:00:00 ... 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XY \n",
              "    description:  Curah Hujan\n",
              "    units:        mm/h\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,..."
            ],
            "text/html": [
              "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
              "<defs>\n",
              "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
              "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
              "</symbol>\n",
              "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
              "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
              "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
              "</symbol>\n",
              "</defs>\n",
              "</svg>\n",
              "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
              " *\n",
              " */\n",
              "\n",
              ":root {\n",
              "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
              "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
              "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
              "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
              "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
              "  --xr-background-color: var(--jp-layout-color0, white);\n",
              "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
              "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
              "}\n",
              "\n",
              "html[theme=dark],\n",
              "body.vscode-dark {\n",
              "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
              "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
              "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
              "  --xr-border-color: #1F1F1F;\n",
              "  --xr-disabled-color: #515151;\n",
              "  --xr-background-color: #111111;\n",
              "  --xr-background-color-row-even: #111111;\n",
              "  --xr-background-color-row-odd: #313131;\n",
              "}\n",
              "\n",
              ".xr-wrap {\n",
              "  display: block;\n",
              "  min-width: 300px;\n",
              "  max-width: 700px;\n",
              "}\n",
              "\n",
              ".xr-text-repr-fallback {\n",
              "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-header {\n",
              "  padding-top: 6px;\n",
              "  padding-bottom: 6px;\n",
              "  margin-bottom: 4px;\n",
              "  border-bottom: solid 1px var(--xr-border-color);\n",
              "}\n",
              "\n",
              ".xr-header > div,\n",
              ".xr-header > ul {\n",
              "  display: inline;\n",
              "  margin-top: 0;\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-obj-type,\n",
              ".xr-array-name {\n",
              "  margin-left: 2px;\n",
              "  margin-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-obj-type {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-sections {\n",
              "  padding-left: 0 !important;\n",
              "  display: grid;\n",
              "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
              "}\n",
              "\n",
              ".xr-section-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-section-item input {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-item input + label {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label {\n",
              "  cursor: pointer;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-item input:enabled + label:hover {\n",
              "  color: var(--xr-font-color0);\n",
              "}\n",
              "\n",
              ".xr-section-summary {\n",
              "  grid-column: 1;\n",
              "  color: var(--xr-font-color2);\n",
              "  font-weight: 500;\n",
              "}\n",
              "\n",
              ".xr-section-summary > span {\n",
              "  display: inline-block;\n",
              "  padding-left: 0.5em;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label {\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in + label:before {\n",
              "  display: inline-block;\n",
              "  content: '►';\n",
              "  font-size: 11px;\n",
              "  width: 15px;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:disabled + label:before {\n",
              "  color: var(--xr-disabled-color);\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label:before {\n",
              "  content: '▼';\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked + label > span {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-section-summary,\n",
              ".xr-section-inline-details {\n",
              "  padding-top: 4px;\n",
              "  padding-bottom: 4px;\n",
              "}\n",
              "\n",
              ".xr-section-inline-details {\n",
              "  grid-column: 2 / -1;\n",
              "}\n",
              "\n",
              ".xr-section-details {\n",
              "  display: none;\n",
              "  grid-column: 1 / -1;\n",
              "  margin-bottom: 5px;\n",
              "}\n",
              "\n",
              ".xr-section-summary-in:checked ~ .xr-section-details {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-array-wrap {\n",
              "  grid-column: 1 / -1;\n",
              "  display: grid;\n",
              "  grid-template-columns: 20px auto;\n",
              "}\n",
              "\n",
              ".xr-array-wrap > label {\n",
              "  grid-column: 1;\n",
              "  vertical-align: top;\n",
              "}\n",
              "\n",
              ".xr-preview {\n",
              "  color: var(--xr-font-color3);\n",
              "}\n",
              "\n",
              ".xr-array-preview,\n",
              ".xr-array-data {\n",
              "  padding: 0 5px !important;\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-array-data,\n",
              ".xr-array-in:checked ~ .xr-array-preview {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              ".xr-array-in:checked ~ .xr-array-data,\n",
              ".xr-array-preview {\n",
              "  display: inline-block;\n",
              "}\n",
              "\n",
              ".xr-dim-list {\n",
              "  display: inline-block !important;\n",
              "  list-style: none;\n",
              "  padding: 0 !important;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list li {\n",
              "  display: inline-block;\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "}\n",
              "\n",
              ".xr-dim-list:before {\n",
              "  content: '(';\n",
              "}\n",
              "\n",
              ".xr-dim-list:after {\n",
              "  content: ')';\n",
              "}\n",
              "\n",
              ".xr-dim-list li:not(:last-child):after {\n",
              "  content: ',';\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-has-index {\n",
              "  font-weight: bold;\n",
              "}\n",
              "\n",
              ".xr-var-list,\n",
              ".xr-var-item {\n",
              "  display: contents;\n",
              "}\n",
              "\n",
              ".xr-var-item > div,\n",
              ".xr-var-item label,\n",
              ".xr-var-item > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-even);\n",
              "  margin-bottom: 0;\n",
              "}\n",
              "\n",
              ".xr-var-item > .xr-var-name:hover span {\n",
              "  padding-right: 5px;\n",
              "}\n",
              "\n",
              ".xr-var-list > li:nth-child(odd) > div,\n",
              ".xr-var-list > li:nth-child(odd) > label,\n",
              ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
              "  background-color: var(--xr-background-color-row-odd);\n",
              "}\n",
              "\n",
              ".xr-var-name {\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-var-dims {\n",
              "  grid-column: 2;\n",
              "}\n",
              "\n",
              ".xr-var-dtype {\n",
              "  grid-column: 3;\n",
              "  text-align: right;\n",
              "  color: var(--xr-font-color2);\n",
              "}\n",
              "\n",
              ".xr-var-preview {\n",
              "  grid-column: 4;\n",
              "}\n",
              "\n",
              ".xr-var-name,\n",
              ".xr-var-dims,\n",
              ".xr-var-dtype,\n",
              ".xr-preview,\n",
              ".xr-attrs dt {\n",
              "  white-space: nowrap;\n",
              "  overflow: hidden;\n",
              "  text-overflow: ellipsis;\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-var-name:hover,\n",
              ".xr-var-dims:hover,\n",
              ".xr-var-dtype:hover,\n",
              ".xr-attrs dt:hover {\n",
              "  overflow: visible;\n",
              "  width: auto;\n",
              "  z-index: 1;\n",
              "}\n",
              "\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  display: none;\n",
              "  background-color: var(--xr-background-color) !important;\n",
              "  padding-bottom: 5px !important;\n",
              "}\n",
              "\n",
              ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
              ".xr-var-data-in:checked ~ .xr-var-data {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              ".xr-var-data > table {\n",
              "  float: right;\n",
              "}\n",
              "\n",
              ".xr-var-name span,\n",
              ".xr-var-data,\n",
              ".xr-attrs {\n",
              "  padding-left: 25px !important;\n",
              "}\n",
              "\n",
              ".xr-attrs,\n",
              ".xr-var-attrs,\n",
              ".xr-var-data {\n",
              "  grid-column: 1 / -1;\n",
              "}\n",
              "\n",
              "dl.xr-attrs {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  display: grid;\n",
              "  grid-template-columns: 125px auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt,\n",
              ".xr-attrs dd {\n",
              "  padding: 0;\n",
              "  margin: 0;\n",
              "  float: left;\n",
              "  padding-right: 10px;\n",
              "  width: auto;\n",
              "}\n",
              "\n",
              ".xr-attrs dt {\n",
              "  font-weight: normal;\n",
              "  grid-column: 1;\n",
              "}\n",
              "\n",
              ".xr-attrs dt:hover span {\n",
              "  display: inline-block;\n",
              "  background: var(--xr-background-color);\n",
              "  padding-right: 10px;\n",
              "}\n",
              "\n",
              ".xr-attrs dd {\n",
              "  grid-column: 2;\n",
              "  white-space: pre-wrap;\n",
              "  word-break: break-all;\n",
              "}\n",
              "\n",
              ".xr-icon-database,\n",
              ".xr-icon-file-text2 {\n",
              "  display: inline-block;\n",
              "  vertical-align: middle;\n",
              "  width: 1em;\n",
              "  height: 1.5em !important;\n",
              "  stroke-width: 0;\n",
              "  stroke: currentColor;\n",
              "  fill: currentColor;\n",
              "}\n",
              "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;RAINC&#x27; (Time: 9, south_north: 195, west_east: 219)&gt;\n",
              "array([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "...\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 5.4718661e-01, 5.6346536e-01],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1098266e+00, 2.2141995e+00, 1.7092756e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1420536e+00, 1.7756225e+00, 4.4582787e-01],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]], dtype=float32)\n",
              "Coordinates:\n",
              "    XLONG    (south_north, west_east) float32 106.1 106.1 106.1 ... 109.9 109.9\n",
              "    XLAT     (south_north, west_east) float32 -8.638 -8.638 ... -5.305 -5.305\n",
              "    XTIME    (Time) float32 0.0 180.0 360.0 540.0 ... 1.08e+03 1.26e+03 1.44e+03\n",
              "  * Time     (Time) datetime64[ns] 2019-02-23T07:00:00 ... 2019-02-24T07:00:00\n",
              "Dimensions without coordinates: south_north, west_east\n",
              "Attributes:\n",
              "    FieldType:    104\n",
              "    MemoryOrder:  XY \n",
              "    description:  Curah Hujan\n",
              "    units:        mm/h\n",
              "    stagger:      \n",
              "    coordinates:  XLONG XLAT XTIME\n",
              "    projection:   Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0,...</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'RAINC'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>Time</span>: 9</li><li><span>south_north</span>: 195</li><li><span>west_east</span>: 219</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-92449bb7-be5c-46c5-a63e-b03c653e4aa8' class='xr-array-in' type='checkbox' checked><label for='section-92449bb7-be5c-46c5-a63e-b03c653e4aa8' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</span></div><div class='xr-array-data'><pre>array([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "...\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],\n",
              "\n",
              "       [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 5.4718661e-01, 5.6346536e-01],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1098266e+00, 2.2141995e+00, 1.7092756e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         1.1420536e+00, 1.7756225e+00, 4.4582787e-01],\n",
              "        ...,\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00],\n",
              "        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,\n",
              "         0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-36d4455e-af23-44be-8dc6-1e0afc22cec8' class='xr-section-summary-in' type='checkbox'  checked><label for='section-36d4455e-af23-44be-8dc6-1e0afc22cec8' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>XLONG</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>106.1 106.1 106.1 ... 109.9 109.9</div><input id='attrs-8a5ba839-ff24-4244-9fa5-e74173e5c940' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8a5ba839-ff24-4244-9fa5-e74173e5c940' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-aea774eb-f804-48cf-827e-8a5945213c7b' class='xr-var-data-in' type='checkbox'><label for='data-aea774eb-f804-48cf-827e-8a5945213c7b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       ...,\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681],\n",
              "       [106.11319, 106.1305 , 106.14781, ..., 109.85219, 109.8695 ,\n",
              "        109.88681]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XLAT</span></div><div class='xr-var-dims'>(south_north, west_east)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-8.638 -8.638 ... -5.305 -5.305</div><input id='attrs-81e5bb47-abd2-40f9-8a8e-ff4591ffa45a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-81e5bb47-abd2-40f9-8a8e-ff4591ffa45a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6a6b54d4-5b31-48f3-9083-56542433e2c5' class='xr-var-data-in' type='checkbox'><label for='data-6a6b54d4-5b31-48f3-9083-56542433e2c5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-8.637711 , -8.637711 , -8.637711 , ..., -8.637711 , -8.637711 ,\n",
              "        -8.637711 ],\n",
              "       [-8.62059  , -8.62059  , -8.62059  , ..., -8.62059  , -8.62059  ,\n",
              "        -8.62059  ],\n",
              "       [-8.6034775, -8.6034775, -8.6034775, ..., -8.6034775, -8.6034775,\n",
              "        -8.6034775],\n",
              "       ...,\n",
              "       [-5.3393173, -5.3393173, -5.3393173, ..., -5.3393173, -5.3393173,\n",
              "        -5.3393173],\n",
              "       [-5.3220825, -5.3220825, -5.3220825, ..., -5.3220825, -5.3220825,\n",
              "        -5.3220825],\n",
              "       [-5.3048477, -5.3048477, -5.3048477, ..., -5.3048477, -5.3048477,\n",
              "        -5.3048477]], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>XTIME</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 180.0 ... 1.26e+03 1.44e+03</div><input id='attrs-32e8ef13-9106-4666-8490-e40ec1390a01' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-32e8ef13-9106-4666-8490-e40ec1390a01' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f3f08e23-6f34-4532-b2b6-8af440f3ecef' class='xr-var-data-in' type='checkbox'><label for='data-f3f08e23-6f34-4532-b2b6-8af440f3ecef' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0.,  180.,  360.,  540.,  720.,  900., 1080., 1260., 1440.],\n",
              "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>Time</span></div><div class='xr-var-dims'>(Time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2019-02-23T07:00:00 ... 2019-02-...</div><input id='attrs-de0ddddc-d805-438f-8126-e219d1ba96da' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-de0ddddc-d805-438f-8126-e219d1ba96da' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b02d1738-fd22-4185-8390-f49213eff441' class='xr-var-data-in' type='checkbox'><label for='data-b02d1738-fd22-4185-8390-f49213eff441' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2019-02-23T07:00:00.000000000&#x27;, &#x27;2019-02-23T10:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T13:00:00.000000000&#x27;, &#x27;2019-02-23T16:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-23T19:00:00.000000000&#x27;, &#x27;2019-02-23T22:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T01:00:00.000000000&#x27;, &#x27;2019-02-24T04:00:00.000000000&#x27;,\n",
              "       &#x27;2019-02-24T07:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-409f1126-0ae9-4623-aba2-17926c6c9cca' class='xr-section-summary-in' type='checkbox'  checked><label for='section-409f1126-0ae9-4623-aba2-17926c6c9cca' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>FieldType :</span></dt><dd>104</dd><dt><span>MemoryOrder :</span></dt><dd>XY </dd><dt><span>description :</span></dt><dd>Curah Hujan</dd><dt><span>units :</span></dt><dd>mm/h</dd><dt><span>stagger :</span></dt><dd></dd><dt><span>coordinates :</span></dt><dd>XLONG XLAT XTIME</dd><dt><span>projection :</span></dt><dd>Mercator(stand_lon=-98.0, moad_cen_lat=-7.0, truelat1=30.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)</dd></dl></div></li></ul></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "prec = curah_hujan(nc2,1)\n",
        "#Waktunya ditambah 7 jam\n",
        "prec['Time'] = prec['Time'] + np.timedelta64(7, 'h')\n",
        "prec"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_RrQEOpWlnZt",
        "outputId": "4c34bfb6-4b2c-480b-c1c0-706a507b49d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:228: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(multi_line_string) > 1:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:280: ShapelyDeprecationWarning: Iteration over multi-part geometries is deprecated and will be removed in Shapely 2.0. Use the `geoms` property to access the constituent parts of a multi-part geometry.\n",
            "  for line in multi_line_string:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:347: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(p_mline) > 0:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "for idx,val in enumerate(time.values):\n",
        "    prec_slice = prec.isel(Time=idx)\n",
        "    #Create a figure\n",
        "    fig = plt.figure(figsize=(12,6))\n",
        "    # Set the GeoAxes to the projection used by WRF\n",
        "    ax = plt.axes(projection=crs.Mercator())\n",
        "    # Add coastlines\n",
        "    ax.coastlines('10m', linewidth=2)\n",
        "\n",
        "    #Deklarasi variabel plot\n",
        "    x = wrf.to_np(prec_slice['XLONG'])\n",
        "    y =wrf.to_np(prec_slice['XLAT'])\n",
        "    variable = wrf.to_np(prec_slice) #dimensi harus jadi 2d (x,y) tidak ada z atau time\n",
        "    waktu = pd.to_datetime(prec_slice['Time'].values).strftime('%d %B %Y, %H:%M:%S')\n",
        "    #Mau mengubah format penulisan waktu?? -> https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\n",
        "\n",
        "    # Plot contours\n",
        "#     lev = np.arange(0,35,5)\n",
        "    lev = [0,2,4,6,8,10,12,14,16,18,20,22,24,26]\n",
        "    map = plt.contourf(x,                    #x coordinate\n",
        "                 y,                    #y coordinate\n",
        "                 variable,                  #variable to plot\n",
        "                 transform=crs.PlateCarree(),\n",
        "                 cmap=get_cmap(\"Blues\"),  #set cmap, reversed() to reversed color order\n",
        "                 levels=lev,                         #set level\n",
        "                 extend='max')                      #extend color bar\n",
        "\n",
        "    # Add a color bar\n",
        "    cbar = plt.colorbar(ax=ax, shrink=.8)\n",
        "    cbar.set_label(prec_slice.units)\n",
        "\n",
        "    # Add the gridlines\n",
        "    gl=ax.gridlines(color='black')\n",
        "    gl.bottom_labels, gl.left_labels = True, True\n",
        "    gl.xformatter = LONGITUDE_FORMATTER\n",
        "    gl.yformatter = LATITUDE_FORMATTER\n",
        "    gl.xlabel_style = {'size': 10}\n",
        "    gl.ylabel_style = {'size': 10}\n",
        "\n",
        "    #add title\n",
        "    plt.title('Curah Hujan ('+prec_slice.units+')'+'\\n'+str(waktu) + ' WIB', fontsize=15)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}